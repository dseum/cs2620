// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: converse/service/main/main.proto

#include "converse/service/main/main.pb.h"
#include "converse/service/main/main.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace converse {
namespace service {
namespace main {

static const char* MainService_method_names[] = {
  "/converse.service.main.MainService/SignupUser",
  "/converse.service.main.MainService/SigninUser",
  "/converse.service.main.MainService/SignoutUser",
  "/converse.service.main.MainService/DeleteUser",
  "/converse.service.main.MainService/GetOtherUsers",
  "/converse.service.main.MainService/CreateConversation",
  "/converse.service.main.MainService/GetConversations",
  "/converse.service.main.MainService/DeleteConversation",
  "/converse.service.main.MainService/SendMessage",
  "/converse.service.main.MainService/ReadMessages",
  "/converse.service.main.MainService/GetMessages",
  "/converse.service.main.MainService/DeleteMessage",
  "/converse.service.main.MainService/ReceiveMessage",
  "/converse.service.main.MainService/ReceiveReadMessages",
};

std::unique_ptr< MainService::Stub> MainService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MainService::Stub> stub(new MainService::Stub(channel, options));
  return stub;
}

MainService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SignupUser_(MainService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SigninUser_(MainService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignoutUser_(MainService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUser_(MainService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOtherUsers_(MainService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateConversation_(MainService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConversations_(MainService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteConversation_(MainService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessage_(MainService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadMessages_(MainService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMessages_(MainService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMessage_(MainService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReceiveMessage_(MainService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReceiveReadMessages_(MainService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MainService::Stub::SignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::converse::service::main::SignupUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::SignupUserRequest, ::converse::service::main::SignupUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignupUser_, context, request, response);
}

void MainService::Stub::async::SignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest* request, ::converse::service::main::SignupUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::SignupUserRequest, ::converse::service::main::SignupUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignupUser_, context, request, response, std::move(f));
}

void MainService::Stub::async::SignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest* request, ::converse::service::main::SignupUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignupUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::SignupUserResponse>* MainService::Stub::PrepareAsyncSignupUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::SignupUserResponse, ::converse::service::main::SignupUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignupUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::SignupUserResponse>* MainService::Stub::AsyncSignupUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignupUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainService::Stub::SigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::converse::service::main::SigninUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::SigninUserRequest, ::converse::service::main::SigninUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SigninUser_, context, request, response);
}

void MainService::Stub::async::SigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest* request, ::converse::service::main::SigninUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::SigninUserRequest, ::converse::service::main::SigninUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SigninUser_, context, request, response, std::move(f));
}

void MainService::Stub::async::SigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest* request, ::converse::service::main::SigninUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SigninUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::SigninUserResponse>* MainService::Stub::PrepareAsyncSigninUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::SigninUserResponse, ::converse::service::main::SigninUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SigninUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::SigninUserResponse>* MainService::Stub::AsyncSigninUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSigninUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainService::Stub::SignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::converse::service::main::SignoutUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::SignoutUserRequest, ::converse::service::main::SignoutUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignoutUser_, context, request, response);
}

void MainService::Stub::async::SignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest* request, ::converse::service::main::SignoutUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::SignoutUserRequest, ::converse::service::main::SignoutUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignoutUser_, context, request, response, std::move(f));
}

void MainService::Stub::async::SignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest* request, ::converse::service::main::SignoutUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignoutUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::SignoutUserResponse>* MainService::Stub::PrepareAsyncSignoutUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::SignoutUserResponse, ::converse::service::main::SignoutUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignoutUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::SignoutUserResponse>* MainService::Stub::AsyncSignoutUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignoutUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainService::Stub::DeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::converse::service::main::DeleteUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::DeleteUserRequest, ::converse::service::main::DeleteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteUser_, context, request, response);
}

void MainService::Stub::async::DeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest* request, ::converse::service::main::DeleteUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::DeleteUserRequest, ::converse::service::main::DeleteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, std::move(f));
}

void MainService::Stub::async::DeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest* request, ::converse::service::main::DeleteUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteUserResponse>* MainService::Stub::PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::DeleteUserResponse, ::converse::service::main::DeleteUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteUserResponse>* MainService::Stub::AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainService::Stub::GetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::converse::service::main::GetOtherUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::GetOtherUsersRequest, ::converse::service::main::GetOtherUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOtherUsers_, context, request, response);
}

void MainService::Stub::async::GetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest* request, ::converse::service::main::GetOtherUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::GetOtherUsersRequest, ::converse::service::main::GetOtherUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOtherUsers_, context, request, response, std::move(f));
}

void MainService::Stub::async::GetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest* request, ::converse::service::main::GetOtherUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOtherUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::GetOtherUsersResponse>* MainService::Stub::PrepareAsyncGetOtherUsersRaw(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::GetOtherUsersResponse, ::converse::service::main::GetOtherUsersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOtherUsers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::GetOtherUsersResponse>* MainService::Stub::AsyncGetOtherUsersRaw(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOtherUsersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainService::Stub::CreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::converse::service::main::CreateConversationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::CreateConversationRequest, ::converse::service::main::CreateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateConversation_, context, request, response);
}

void MainService::Stub::async::CreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest* request, ::converse::service::main::CreateConversationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::CreateConversationRequest, ::converse::service::main::CreateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConversation_, context, request, response, std::move(f));
}

void MainService::Stub::async::CreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest* request, ::converse::service::main::CreateConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConversation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::CreateConversationResponse>* MainService::Stub::PrepareAsyncCreateConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::CreateConversationResponse, ::converse::service::main::CreateConversationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateConversation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::CreateConversationResponse>* MainService::Stub::AsyncCreateConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateConversationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainService::Stub::GetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::converse::service::main::GetConversationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::GetConversationsRequest, ::converse::service::main::GetConversationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConversations_, context, request, response);
}

void MainService::Stub::async::GetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest* request, ::converse::service::main::GetConversationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::GetConversationsRequest, ::converse::service::main::GetConversationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConversations_, context, request, response, std::move(f));
}

void MainService::Stub::async::GetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest* request, ::converse::service::main::GetConversationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConversations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationsResponse>* MainService::Stub::PrepareAsyncGetConversationsRaw(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::GetConversationsResponse, ::converse::service::main::GetConversationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConversations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationsResponse>* MainService::Stub::AsyncGetConversationsRaw(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConversationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainService::Stub::DeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::converse::service::main::DeleteConversationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::DeleteConversationRequest, ::converse::service::main::DeleteConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteConversation_, context, request, response);
}

void MainService::Stub::async::DeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest* request, ::converse::service::main::DeleteConversationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::DeleteConversationRequest, ::converse::service::main::DeleteConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteConversation_, context, request, response, std::move(f));
}

void MainService::Stub::async::DeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest* request, ::converse::service::main::DeleteConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteConversation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteConversationResponse>* MainService::Stub::PrepareAsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::DeleteConversationResponse, ::converse::service::main::DeleteConversationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteConversation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteConversationResponse>* MainService::Stub::AsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteConversationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainService::Stub::SendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::converse::service::main::SendMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::SendMessageRequest, ::converse::service::main::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void MainService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest* request, ::converse::service::main::SendMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::SendMessageRequest, ::converse::service::main::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void MainService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest* request, ::converse::service::main::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::SendMessageResponse>* MainService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::SendMessageResponse, ::converse::service::main::SendMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::SendMessageResponse>* MainService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainService::Stub::ReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::converse::service::main::ReadMessagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::ReadMessagesRequest, ::converse::service::main::ReadMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadMessages_, context, request, response);
}

void MainService::Stub::async::ReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest* request, ::converse::service::main::ReadMessagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::ReadMessagesRequest, ::converse::service::main::ReadMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadMessages_, context, request, response, std::move(f));
}

void MainService::Stub::async::ReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest* request, ::converse::service::main::ReadMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::ReadMessagesResponse>* MainService::Stub::PrepareAsyncReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::ReadMessagesResponse, ::converse::service::main::ReadMessagesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::ReadMessagesResponse>* MainService::Stub::AsyncReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainService::Stub::GetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::converse::service::main::GetMessagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::GetMessagesRequest, ::converse::service::main::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMessages_, context, request, response);
}

void MainService::Stub::async::GetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest* request, ::converse::service::main::GetMessagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::GetMessagesRequest, ::converse::service::main::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, std::move(f));
}

void MainService::Stub::async::GetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest* request, ::converse::service::main::GetMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::GetMessagesResponse>* MainService::Stub::PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::GetMessagesResponse, ::converse::service::main::GetMessagesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::GetMessagesResponse>* MainService::Stub::AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainService::Stub::DeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::converse::service::main::DeleteMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::main::DeleteMessageRequest, ::converse::service::main::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteMessage_, context, request, response);
}

void MainService::Stub::async::DeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest* request, ::converse::service::main::DeleteMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::main::DeleteMessageRequest, ::converse::service::main::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, std::move(f));
}

void MainService::Stub::async::DeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest* request, ::converse::service::main::DeleteMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteMessageResponse>* MainService::Stub::PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::main::DeleteMessageResponse, ::converse::service::main::DeleteMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteMessageResponse>* MainService::Stub::AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::converse::service::main::ReceiveMessageResponse>* MainService::Stub::ReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::converse::service::main::ReceiveMessageResponse>::Create(channel_.get(), rpcmethod_ReceiveMessage_, context, request);
}

void MainService::Stub::async::ReceiveMessage(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest* request, ::grpc::ClientReadReactor< ::converse::service::main::ReceiveMessageResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::converse::service::main::ReceiveMessageResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ReceiveMessage_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::converse::service::main::ReceiveMessageResponse>* MainService::Stub::AsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::converse::service::main::ReceiveMessageResponse>::Create(channel_.get(), cq, rpcmethod_ReceiveMessage_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::converse::service::main::ReceiveMessageResponse>* MainService::Stub::PrepareAsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::converse::service::main::ReceiveMessageResponse>::Create(channel_.get(), cq, rpcmethod_ReceiveMessage_, context, request, false, nullptr);
}

::grpc::ClientReader< ::converse::service::main::ReceiveReadMessagesResponse>* MainService::Stub::ReceiveReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::converse::service::main::ReceiveReadMessagesResponse>::Create(channel_.get(), rpcmethod_ReceiveReadMessages_, context, request);
}

void MainService::Stub::async::ReceiveReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest* request, ::grpc::ClientReadReactor< ::converse::service::main::ReceiveReadMessagesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::converse::service::main::ReceiveReadMessagesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ReceiveReadMessages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::converse::service::main::ReceiveReadMessagesResponse>* MainService::Stub::AsyncReceiveReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::converse::service::main::ReceiveReadMessagesResponse>::Create(channel_.get(), cq, rpcmethod_ReceiveReadMessages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::converse::service::main::ReceiveReadMessagesResponse>* MainService::Stub::PrepareAsyncReceiveReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::converse::service::main::ReceiveReadMessagesResponse>::Create(channel_.get(), cq, rpcmethod_ReceiveReadMessages_, context, request, false, nullptr);
}

MainService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::SignupUserRequest, ::converse::service::main::SignupUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::SignupUserRequest* req,
             ::converse::service::main::SignupUserResponse* resp) {
               return service->SignupUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::SigninUserRequest, ::converse::service::main::SigninUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::SigninUserRequest* req,
             ::converse::service::main::SigninUserResponse* resp) {
               return service->SigninUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::SignoutUserRequest, ::converse::service::main::SignoutUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::SignoutUserRequest* req,
             ::converse::service::main::SignoutUserResponse* resp) {
               return service->SignoutUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::DeleteUserRequest, ::converse::service::main::DeleteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::DeleteUserRequest* req,
             ::converse::service::main::DeleteUserResponse* resp) {
               return service->DeleteUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::GetOtherUsersRequest, ::converse::service::main::GetOtherUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::GetOtherUsersRequest* req,
             ::converse::service::main::GetOtherUsersResponse* resp) {
               return service->GetOtherUsers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::CreateConversationRequest, ::converse::service::main::CreateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::CreateConversationRequest* req,
             ::converse::service::main::CreateConversationResponse* resp) {
               return service->CreateConversation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::GetConversationsRequest, ::converse::service::main::GetConversationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::GetConversationsRequest* req,
             ::converse::service::main::GetConversationsResponse* resp) {
               return service->GetConversations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::DeleteConversationRequest, ::converse::service::main::DeleteConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::DeleteConversationRequest* req,
             ::converse::service::main::DeleteConversationResponse* resp) {
               return service->DeleteConversation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::SendMessageRequest, ::converse::service::main::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::SendMessageRequest* req,
             ::converse::service::main::SendMessageResponse* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::ReadMessagesRequest, ::converse::service::main::ReadMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::ReadMessagesRequest* req,
             ::converse::service::main::ReadMessagesResponse* resp) {
               return service->ReadMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::GetMessagesRequest, ::converse::service::main::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::GetMessagesRequest* req,
             ::converse::service::main::GetMessagesResponse* resp) {
               return service->GetMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainService::Service, ::converse::service::main::DeleteMessageRequest, ::converse::service::main::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::DeleteMessageRequest* req,
             ::converse::service::main::DeleteMessageResponse* resp) {
               return service->DeleteMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[12],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MainService::Service, ::converse::service::main::ReceiveMessageRequest, ::converse::service::main::ReceiveMessageResponse>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::ReceiveMessageRequest* req,
             ::grpc::ServerWriter<::converse::service::main::ReceiveMessageResponse>* writer) {
               return service->ReceiveMessage(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainService_method_names[13],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MainService::Service, ::converse::service::main::ReceiveReadMessagesRequest, ::converse::service::main::ReceiveReadMessagesResponse>(
          [](MainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::main::ReceiveReadMessagesRequest* req,
             ::grpc::ServerWriter<::converse::service::main::ReceiveReadMessagesResponse>* writer) {
               return service->ReceiveReadMessages(ctx, req, writer);
             }, this)));
}

MainService::Service::~Service() {
}

::grpc::Status MainService::Service::SignupUser(::grpc::ServerContext* context, const ::converse::service::main::SignupUserRequest* request, ::converse::service::main::SignupUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::SigninUser(::grpc::ServerContext* context, const ::converse::service::main::SigninUserRequest* request, ::converse::service::main::SigninUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::SignoutUser(::grpc::ServerContext* context, const ::converse::service::main::SignoutUserRequest* request, ::converse::service::main::SignoutUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::DeleteUser(::grpc::ServerContext* context, const ::converse::service::main::DeleteUserRequest* request, ::converse::service::main::DeleteUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::GetOtherUsers(::grpc::ServerContext* context, const ::converse::service::main::GetOtherUsersRequest* request, ::converse::service::main::GetOtherUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::CreateConversation(::grpc::ServerContext* context, const ::converse::service::main::CreateConversationRequest* request, ::converse::service::main::CreateConversationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::GetConversations(::grpc::ServerContext* context, const ::converse::service::main::GetConversationsRequest* request, ::converse::service::main::GetConversationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::DeleteConversation(::grpc::ServerContext* context, const ::converse::service::main::DeleteConversationRequest* request, ::converse::service::main::DeleteConversationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::SendMessage(::grpc::ServerContext* context, const ::converse::service::main::SendMessageRequest* request, ::converse::service::main::SendMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::ReadMessages(::grpc::ServerContext* context, const ::converse::service::main::ReadMessagesRequest* request, ::converse::service::main::ReadMessagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::GetMessages(::grpc::ServerContext* context, const ::converse::service::main::GetMessagesRequest* request, ::converse::service::main::GetMessagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::DeleteMessage(::grpc::ServerContext* context, const ::converse::service::main::DeleteMessageRequest* request, ::converse::service::main::DeleteMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::ReceiveMessage(::grpc::ServerContext* context, const ::converse::service::main::ReceiveMessageRequest* request, ::grpc::ServerWriter< ::converse::service::main::ReceiveMessageResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainService::Service::ReceiveReadMessages(::grpc::ServerContext* context, const ::converse::service::main::ReceiveReadMessagesRequest* request, ::grpc::ServerWriter< ::converse::service::main::ReceiveReadMessagesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace converse
}  // namespace service
}  // namespace main


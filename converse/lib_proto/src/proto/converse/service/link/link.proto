syntax = "proto3";

package converse.service.link;

service LinkService {
  rpc GetServers(GetServersRequest) returns (stream GetServersResponse);
  rpc IdentifyMyself(IdentifyMyselfRequest) returns (IdentifyMyselfResponse);
  rpc GetTransactions(GetTransactionsRequest) returns (stream GetTransactionsResponse);
}

message GetServersRequest {}

message GetServersResponse {
  repeated ServerAddress cluster_addresses = 1;
}

message ServerAddress {
  string host = 1;
  uint32 port = 2;
}

message IdentifyMyselfRequest {
  string host = 1;
  uint32 port = 2;
}

message IdentifyMyselfResponse {
  repeated ServerAddress cluster_addresses = 1;
  bytes database = 2;
}

message GetTransactionsRequest {}

message GetTransactionsResponse {
  uint64 transaction_id = 1;

  // Each transaction can include one or more operations (insert, update, etc.).
  repeated Operation operations = 2;
}

// Each "Operation" represents an insert, update, or delete statement
// in a structured form. This parallels your existing approach:
//  - table_name could be "users", "messages", etc.
//  - new_values could hold columns for an insert or an update
//  - old_key_values identifies which row(s) to update or delete
message Operation {
  OperationType type = 1;
  string table_name = 2;

  // For insert or update, these are the columns & values to set:
  map<string, string> new_values = 3;

  // For update or delete, these are the primary key or filter columns:
  map<string, string> old_key_values = 4;
}

// Simple enum for describing the kind of write operation:
enum OperationType {
  OPERATION_TYPE_UNSPECIFIED = 0;
  OPERATION_TYPE_INSERT = 1;
  OPERATION_TYPE_UPDATE = 2;
}

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: converse/service/main/main.proto
#ifndef GRPC_converse_2fservice_2fmain_2fmain_2eproto__INCLUDED
#define GRPC_converse_2fservice_2fmain_2fmain_2eproto__INCLUDED

#include "converse/service/main/main.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace converse {
namespace service {
namespace main {

class MainService final {
 public:
  static constexpr char const* service_full_name() {
    return "converse.service.main.MainService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::converse::service::main::SignupUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignupUserResponse>> AsyncSignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignupUserResponse>>(AsyncSignupUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignupUserResponse>> PrepareAsyncSignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignupUserResponse>>(PrepareAsyncSignupUserRaw(context, request, cq));
    }
    virtual ::grpc::Status SigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::converse::service::main::SigninUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SigninUserResponse>> AsyncSigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SigninUserResponse>>(AsyncSigninUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SigninUserResponse>> PrepareAsyncSigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SigninUserResponse>>(PrepareAsyncSigninUserRaw(context, request, cq));
    }
    virtual ::grpc::Status SignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::converse::service::main::SignoutUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignoutUserResponse>> AsyncSignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignoutUserResponse>>(AsyncSignoutUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignoutUserResponse>> PrepareAsyncSignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignoutUserResponse>>(PrepareAsyncSignoutUserRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::converse::service::main::DeleteUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteUserResponse>> AsyncDeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteUserResponse>>(AsyncDeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteUserResponse>> PrepareAsyncDeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteUserResponse>>(PrepareAsyncDeleteUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::converse::service::main::GetOtherUsersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetOtherUsersResponse>> AsyncGetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetOtherUsersResponse>>(AsyncGetOtherUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetOtherUsersResponse>> PrepareAsyncGetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetOtherUsersResponse>>(PrepareAsyncGetOtherUsersRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::converse::service::main::CreateConversationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::CreateConversationResponse>> AsyncCreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::CreateConversationResponse>>(AsyncCreateConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::CreateConversationResponse>> PrepareAsyncCreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::CreateConversationResponse>>(PrepareAsyncCreateConversationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetConversation(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest& request, ::converse::service::main::GetConversationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationResponse>> AsyncGetConversation(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationResponse>>(AsyncGetConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationResponse>> PrepareAsyncGetConversation(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationResponse>>(PrepareAsyncGetConversationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::converse::service::main::GetConversationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationsResponse>> AsyncGetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationsResponse>>(AsyncGetConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationsResponse>> PrepareAsyncGetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationsResponse>>(PrepareAsyncGetConversationsRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::converse::service::main::DeleteConversationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteConversationResponse>> AsyncDeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteConversationResponse>>(AsyncDeleteConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteConversationResponse>> PrepareAsyncDeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteConversationResponse>>(PrepareAsyncDeleteConversationRaw(context, request, cq));
    }
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::converse::service::main::SendMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::converse::service::main::ReadMessagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::ReadMessagesResponse>> AsyncReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::ReadMessagesResponse>>(AsyncReadMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::ReadMessagesResponse>> PrepareAsyncReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::ReadMessagesResponse>>(PrepareAsyncReadMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::converse::service::main::GetMessagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetMessagesResponse>> AsyncGetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetMessagesResponse>>(AsyncGetMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetMessagesResponse>> PrepareAsyncGetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetMessagesResponse>>(PrepareAsyncGetMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::converse::service::main::DeleteMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteMessageResponse>> AsyncDeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteMessageResponse>>(AsyncDeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteMessageResponse>> PrepareAsyncDeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteMessageResponse>>(PrepareAsyncDeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::converse::service::main::ReceiveMessageResponse>> ReceiveMessage(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::converse::service::main::ReceiveMessageResponse>>(ReceiveMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveMessageResponse>> AsyncReceiveMessage(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveMessageResponse>>(AsyncReceiveMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveMessageResponse>> PrepareAsyncReceiveMessage(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveMessageResponse>>(PrepareAsyncReceiveMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::converse::service::main::ReceiveReadMessagesResponse>> ReceiveReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::converse::service::main::ReceiveReadMessagesResponse>>(ReceiveReadMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveReadMessagesResponse>> AsyncReceiveReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveReadMessagesResponse>>(AsyncReceiveReadMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveReadMessagesResponse>> PrepareAsyncReceiveReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveReadMessagesResponse>>(PrepareAsyncReceiveReadMessagesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest* request, ::converse::service::main::SignupUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest* request, ::converse::service::main::SignupUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest* request, ::converse::service::main::SigninUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest* request, ::converse::service::main::SigninUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest* request, ::converse::service::main::SignoutUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest* request, ::converse::service::main::SignoutUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest* request, ::converse::service::main::DeleteUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest* request, ::converse::service::main::DeleteUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest* request, ::converse::service::main::GetOtherUsersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest* request, ::converse::service::main::GetOtherUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest* request, ::converse::service::main::CreateConversationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest* request, ::converse::service::main::CreateConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetConversation(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest* request, ::converse::service::main::GetConversationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConversation(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest* request, ::converse::service::main::GetConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest* request, ::converse::service::main::GetConversationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest* request, ::converse::service::main::GetConversationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest* request, ::converse::service::main::DeleteConversationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest* request, ::converse::service::main::DeleteConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest* request, ::converse::service::main::SendMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest* request, ::converse::service::main::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest* request, ::converse::service::main::ReadMessagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest* request, ::converse::service::main::ReadMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest* request, ::converse::service::main::GetMessagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest* request, ::converse::service::main::GetMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest* request, ::converse::service::main::DeleteMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest* request, ::converse::service::main::DeleteMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReceiveMessage(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest* request, ::grpc::ClientReadReactor< ::converse::service::main::ReceiveMessageResponse>* reactor) = 0;
      virtual void ReceiveReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest* request, ::grpc::ClientReadReactor< ::converse::service::main::ReceiveReadMessagesResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignupUserResponse>* AsyncSignupUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignupUserResponse>* PrepareAsyncSignupUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SigninUserResponse>* AsyncSigninUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SigninUserResponse>* PrepareAsyncSigninUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignoutUserResponse>* AsyncSignoutUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SignoutUserResponse>* PrepareAsyncSignoutUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteUserResponse>* AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteUserResponse>* PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetOtherUsersResponse>* AsyncGetOtherUsersRaw(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetOtherUsersResponse>* PrepareAsyncGetOtherUsersRaw(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::CreateConversationResponse>* AsyncCreateConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::CreateConversationResponse>* PrepareAsyncCreateConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationResponse>* AsyncGetConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationResponse>* PrepareAsyncGetConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationsResponse>* AsyncGetConversationsRaw(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetConversationsResponse>* PrepareAsyncGetConversationsRaw(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteConversationResponse>* AsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteConversationResponse>* PrepareAsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::ReadMessagesResponse>* AsyncReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::ReadMessagesResponse>* PrepareAsyncReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetMessagesResponse>* AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::GetMessagesResponse>* PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteMessageResponse>* AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::main::DeleteMessageResponse>* PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::converse::service::main::ReceiveMessageResponse>* ReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveMessageResponse>* AsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveMessageResponse>* PrepareAsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::converse::service::main::ReceiveReadMessagesResponse>* ReceiveReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveReadMessagesResponse>* AsyncReceiveReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::converse::service::main::ReceiveReadMessagesResponse>* PrepareAsyncReceiveReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::converse::service::main::SignupUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignupUserResponse>> AsyncSignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignupUserResponse>>(AsyncSignupUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignupUserResponse>> PrepareAsyncSignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignupUserResponse>>(PrepareAsyncSignupUserRaw(context, request, cq));
    }
    ::grpc::Status SigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::converse::service::main::SigninUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SigninUserResponse>> AsyncSigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SigninUserResponse>>(AsyncSigninUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SigninUserResponse>> PrepareAsyncSigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SigninUserResponse>>(PrepareAsyncSigninUserRaw(context, request, cq));
    }
    ::grpc::Status SignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::converse::service::main::SignoutUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignoutUserResponse>> AsyncSignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignoutUserResponse>>(AsyncSignoutUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignoutUserResponse>> PrepareAsyncSignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignoutUserResponse>>(PrepareAsyncSignoutUserRaw(context, request, cq));
    }
    ::grpc::Status DeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::converse::service::main::DeleteUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteUserResponse>> AsyncDeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteUserResponse>>(AsyncDeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteUserResponse>> PrepareAsyncDeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteUserResponse>>(PrepareAsyncDeleteUserRaw(context, request, cq));
    }
    ::grpc::Status GetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::converse::service::main::GetOtherUsersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetOtherUsersResponse>> AsyncGetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetOtherUsersResponse>>(AsyncGetOtherUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetOtherUsersResponse>> PrepareAsyncGetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetOtherUsersResponse>>(PrepareAsyncGetOtherUsersRaw(context, request, cq));
    }
    ::grpc::Status CreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::converse::service::main::CreateConversationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::CreateConversationResponse>> AsyncCreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::CreateConversationResponse>>(AsyncCreateConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::CreateConversationResponse>> PrepareAsyncCreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::CreateConversationResponse>>(PrepareAsyncCreateConversationRaw(context, request, cq));
    }
    ::grpc::Status GetConversation(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest& request, ::converse::service::main::GetConversationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationResponse>> AsyncGetConversation(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationResponse>>(AsyncGetConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationResponse>> PrepareAsyncGetConversation(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationResponse>>(PrepareAsyncGetConversationRaw(context, request, cq));
    }
    ::grpc::Status GetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::converse::service::main::GetConversationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationsResponse>> AsyncGetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationsResponse>>(AsyncGetConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationsResponse>> PrepareAsyncGetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationsResponse>>(PrepareAsyncGetConversationsRaw(context, request, cq));
    }
    ::grpc::Status DeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::converse::service::main::DeleteConversationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteConversationResponse>> AsyncDeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteConversationResponse>>(AsyncDeleteConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteConversationResponse>> PrepareAsyncDeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteConversationResponse>>(PrepareAsyncDeleteConversationRaw(context, request, cq));
    }
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::converse::service::main::SendMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    ::grpc::Status ReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::converse::service::main::ReadMessagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::ReadMessagesResponse>> AsyncReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::ReadMessagesResponse>>(AsyncReadMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::ReadMessagesResponse>> PrepareAsyncReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::ReadMessagesResponse>>(PrepareAsyncReadMessagesRaw(context, request, cq));
    }
    ::grpc::Status GetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::converse::service::main::GetMessagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetMessagesResponse>> AsyncGetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetMessagesResponse>>(AsyncGetMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetMessagesResponse>> PrepareAsyncGetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetMessagesResponse>>(PrepareAsyncGetMessagesRaw(context, request, cq));
    }
    ::grpc::Status DeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::converse::service::main::DeleteMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteMessageResponse>> AsyncDeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteMessageResponse>>(AsyncDeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteMessageResponse>> PrepareAsyncDeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteMessageResponse>>(PrepareAsyncDeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::converse::service::main::ReceiveMessageResponse>> ReceiveMessage(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::converse::service::main::ReceiveMessageResponse>>(ReceiveMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveMessageResponse>> AsyncReceiveMessage(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveMessageResponse>>(AsyncReceiveMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveMessageResponse>> PrepareAsyncReceiveMessage(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveMessageResponse>>(PrepareAsyncReceiveMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::converse::service::main::ReceiveReadMessagesResponse>> ReceiveReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::converse::service::main::ReceiveReadMessagesResponse>>(ReceiveReadMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveReadMessagesResponse>> AsyncReceiveReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveReadMessagesResponse>>(AsyncReceiveReadMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveReadMessagesResponse>> PrepareAsyncReceiveReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveReadMessagesResponse>>(PrepareAsyncReceiveReadMessagesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest* request, ::converse::service::main::SignupUserResponse* response, std::function<void(::grpc::Status)>) override;
      void SignupUser(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest* request, ::converse::service::main::SignupUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest* request, ::converse::service::main::SigninUserResponse* response, std::function<void(::grpc::Status)>) override;
      void SigninUser(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest* request, ::converse::service::main::SigninUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest* request, ::converse::service::main::SignoutUserResponse* response, std::function<void(::grpc::Status)>) override;
      void SignoutUser(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest* request, ::converse::service::main::SignoutUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest* request, ::converse::service::main::DeleteUserResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteUser(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest* request, ::converse::service::main::DeleteUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest* request, ::converse::service::main::GetOtherUsersResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOtherUsers(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest* request, ::converse::service::main::GetOtherUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest* request, ::converse::service::main::CreateConversationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateConversation(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest* request, ::converse::service::main::CreateConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetConversation(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest* request, ::converse::service::main::GetConversationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetConversation(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest* request, ::converse::service::main::GetConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest* request, ::converse::service::main::GetConversationsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetConversations(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest* request, ::converse::service::main::GetConversationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest* request, ::converse::service::main::DeleteConversationResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteConversation(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest* request, ::converse::service::main::DeleteConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest* request, ::converse::service::main::SendMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest* request, ::converse::service::main::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest* request, ::converse::service::main::ReadMessagesResponse* response, std::function<void(::grpc::Status)>) override;
      void ReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest* request, ::converse::service::main::ReadMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest* request, ::converse::service::main::GetMessagesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMessages(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest* request, ::converse::service::main::GetMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest* request, ::converse::service::main::DeleteMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteMessage(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest* request, ::converse::service::main::DeleteMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReceiveMessage(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest* request, ::grpc::ClientReadReactor< ::converse::service::main::ReceiveMessageResponse>* reactor) override;
      void ReceiveReadMessages(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest* request, ::grpc::ClientReadReactor< ::converse::service::main::ReceiveReadMessagesResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignupUserResponse>* AsyncSignupUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignupUserResponse>* PrepareAsyncSignupUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignupUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::SigninUserResponse>* AsyncSigninUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::SigninUserResponse>* PrepareAsyncSigninUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SigninUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignoutUserResponse>* AsyncSignoutUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::SignoutUserResponse>* PrepareAsyncSignoutUserRaw(::grpc::ClientContext* context, const ::converse::service::main::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteUserResponse>* AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteUserResponse>* PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetOtherUsersResponse>* AsyncGetOtherUsersRaw(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetOtherUsersResponse>* PrepareAsyncGetOtherUsersRaw(::grpc::ClientContext* context, const ::converse::service::main::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::CreateConversationResponse>* AsyncCreateConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::CreateConversationResponse>* PrepareAsyncCreateConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationResponse>* AsyncGetConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationResponse>* PrepareAsyncGetConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::GetConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationsResponse>* AsyncGetConversationsRaw(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetConversationsResponse>* PrepareAsyncGetConversationsRaw(::grpc::ClientContext* context, const ::converse::service::main::GetConversationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteConversationResponse>* AsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteConversationResponse>* PrepareAsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::ReadMessagesResponse>* AsyncReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::ReadMessagesResponse>* PrepareAsyncReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReadMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetMessagesResponse>* AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::GetMessagesResponse>* PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteMessageResponse>* AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::main::DeleteMessageResponse>* PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::converse::service::main::ReceiveMessageResponse>* ReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request) override;
    ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveMessageResponse>* AsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveMessageResponse>* PrepareAsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::converse::service::main::ReceiveReadMessagesResponse>* ReceiveReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request) override;
    ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveReadMessagesResponse>* AsyncReceiveReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::converse::service::main::ReceiveReadMessagesResponse>* PrepareAsyncReceiveReadMessagesRaw(::grpc::ClientContext* context, const ::converse::service::main::ReceiveReadMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SignupUser_;
    const ::grpc::internal::RpcMethod rpcmethod_SigninUser_;
    const ::grpc::internal::RpcMethod rpcmethod_SignoutUser_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOtherUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateConversation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConversation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConversations_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteConversation_;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveReadMessages_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SignupUser(::grpc::ServerContext* context, const ::converse::service::main::SignupUserRequest* request, ::converse::service::main::SignupUserResponse* response);
    virtual ::grpc::Status SigninUser(::grpc::ServerContext* context, const ::converse::service::main::SigninUserRequest* request, ::converse::service::main::SigninUserResponse* response);
    virtual ::grpc::Status SignoutUser(::grpc::ServerContext* context, const ::converse::service::main::SignoutUserRequest* request, ::converse::service::main::SignoutUserResponse* response);
    virtual ::grpc::Status DeleteUser(::grpc::ServerContext* context, const ::converse::service::main::DeleteUserRequest* request, ::converse::service::main::DeleteUserResponse* response);
    virtual ::grpc::Status GetOtherUsers(::grpc::ServerContext* context, const ::converse::service::main::GetOtherUsersRequest* request, ::converse::service::main::GetOtherUsersResponse* response);
    virtual ::grpc::Status CreateConversation(::grpc::ServerContext* context, const ::converse::service::main::CreateConversationRequest* request, ::converse::service::main::CreateConversationResponse* response);
    virtual ::grpc::Status GetConversation(::grpc::ServerContext* context, const ::converse::service::main::GetConversationRequest* request, ::converse::service::main::GetConversationResponse* response);
    virtual ::grpc::Status GetConversations(::grpc::ServerContext* context, const ::converse::service::main::GetConversationsRequest* request, ::converse::service::main::GetConversationsResponse* response);
    virtual ::grpc::Status DeleteConversation(::grpc::ServerContext* context, const ::converse::service::main::DeleteConversationRequest* request, ::converse::service::main::DeleteConversationResponse* response);
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::converse::service::main::SendMessageRequest* request, ::converse::service::main::SendMessageResponse* response);
    virtual ::grpc::Status ReadMessages(::grpc::ServerContext* context, const ::converse::service::main::ReadMessagesRequest* request, ::converse::service::main::ReadMessagesResponse* response);
    virtual ::grpc::Status GetMessages(::grpc::ServerContext* context, const ::converse::service::main::GetMessagesRequest* request, ::converse::service::main::GetMessagesResponse* response);
    virtual ::grpc::Status DeleteMessage(::grpc::ServerContext* context, const ::converse::service::main::DeleteMessageRequest* request, ::converse::service::main::DeleteMessageResponse* response);
    virtual ::grpc::Status ReceiveMessage(::grpc::ServerContext* context, const ::converse::service::main::ReceiveMessageRequest* request, ::grpc::ServerWriter< ::converse::service::main::ReceiveMessageResponse>* writer);
    virtual ::grpc::Status ReceiveReadMessages(::grpc::ServerContext* context, const ::converse::service::main::ReceiveReadMessagesRequest* request, ::grpc::ServerWriter< ::converse::service::main::ReceiveReadMessagesResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_SignupUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignupUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SignupUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignupUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignupUserRequest* /*request*/, ::converse::service::main::SignupUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignupUser(::grpc::ServerContext* context, ::converse::service::main::SignupUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::SignupUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SigninUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SigninUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SigninUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigninUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SigninUserRequest* /*request*/, ::converse::service::main::SigninUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSigninUser(::grpc::ServerContext* context, ::converse::service::main::SigninUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::SigninUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignoutUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SignoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignoutUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignoutUserRequest* /*request*/, ::converse::service::main::SignoutUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignoutUser(::grpc::ServerContext* context, ::converse::service::main::SignoutUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::SignoutUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteUser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteUserRequest* /*request*/, ::converse::service::main::DeleteUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUser(::grpc::ServerContext* context, ::converse::service::main::DeleteUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::DeleteUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOtherUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOtherUsers() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetOtherUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOtherUsers(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetOtherUsersRequest* /*request*/, ::converse::service::main::GetOtherUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOtherUsers(::grpc::ServerContext* context, ::converse::service::main::GetOtherUsersRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::GetOtherUsersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateConversation() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::CreateConversationRequest* /*request*/, ::converse::service::main::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateConversation(::grpc::ServerContext* context, ::converse::service::main::CreateConversationRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::CreateConversationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConversation() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationRequest* /*request*/, ::converse::service::main::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConversation(::grpc::ServerContext* context, ::converse::service::main::GetConversationRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::GetConversationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConversations() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversations(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationsRequest* /*request*/, ::converse::service::main::GetConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConversations(::grpc::ServerContext* context, ::converse::service::main::GetConversationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::GetConversationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteConversationRequest* /*request*/, ::converse::service::main::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteConversation(::grpc::ServerContext* context, ::converse::service::main::DeleteConversationRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::DeleteConversationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::SendMessageRequest* /*request*/, ::converse::service::main::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::converse::service::main::SendMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::SendMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadMessages() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReadMessagesRequest* /*request*/, ::converse::service::main::ReadMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadMessages(::grpc::ServerContext* context, ::converse::service::main::ReadMessagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::ReadMessagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMessages() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetMessagesRequest* /*request*/, ::converse::service::main::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessages(::grpc::ServerContext* context, ::converse::service::main::GetMessagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::GetMessagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteMessageRequest* /*request*/, ::converse::service::main::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMessage(::grpc::ServerContext* context, ::converse::service::main::DeleteMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::main::DeleteMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveMessage(::grpc::ServerContext* context, ::converse::service::main::ReceiveMessageRequest* request, ::grpc::ServerAsyncWriter< ::converse::service::main::ReceiveMessageResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveReadMessages() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_ReceiveReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveReadMessagesRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveReadMessagesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveReadMessages(::grpc::ServerContext* context, ::converse::service::main::ReceiveReadMessagesRequest* request, ::grpc::ServerAsyncWriter< ::converse::service::main::ReceiveReadMessagesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SignupUser<WithAsyncMethod_SigninUser<WithAsyncMethod_SignoutUser<WithAsyncMethod_DeleteUser<WithAsyncMethod_GetOtherUsers<WithAsyncMethod_CreateConversation<WithAsyncMethod_GetConversation<WithAsyncMethod_GetConversations<WithAsyncMethod_DeleteConversation<WithAsyncMethod_SendMessage<WithAsyncMethod_ReadMessages<WithAsyncMethod_GetMessages<WithAsyncMethod_DeleteMessage<WithAsyncMethod_ReceiveMessage<WithAsyncMethod_ReceiveReadMessages<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SignupUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SignupUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::SignupUserRequest, ::converse::service::main::SignupUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::SignupUserRequest* request, ::converse::service::main::SignupUserResponse* response) { return this->SignupUser(context, request, response); }));}
    void SetMessageAllocatorFor_SignupUser(
        ::grpc::MessageAllocator< ::converse::service::main::SignupUserRequest, ::converse::service::main::SignupUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::SignupUserRequest, ::converse::service::main::SignupUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SignupUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignupUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignupUserRequest* /*request*/, ::converse::service::main::SignupUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignupUser(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::SignupUserRequest* /*request*/, ::converse::service::main::SignupUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SigninUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SigninUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::SigninUserRequest, ::converse::service::main::SigninUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::SigninUserRequest* request, ::converse::service::main::SigninUserResponse* response) { return this->SigninUser(context, request, response); }));}
    void SetMessageAllocatorFor_SigninUser(
        ::grpc::MessageAllocator< ::converse::service::main::SigninUserRequest, ::converse::service::main::SigninUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::SigninUserRequest, ::converse::service::main::SigninUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SigninUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigninUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SigninUserRequest* /*request*/, ::converse::service::main::SigninUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SigninUser(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::SigninUserRequest* /*request*/, ::converse::service::main::SigninUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SignoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SignoutUser() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::SignoutUserRequest, ::converse::service::main::SignoutUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::SignoutUserRequest* request, ::converse::service::main::SignoutUserResponse* response) { return this->SignoutUser(context, request, response); }));}
    void SetMessageAllocatorFor_SignoutUser(
        ::grpc::MessageAllocator< ::converse::service::main::SignoutUserRequest, ::converse::service::main::SignoutUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::SignoutUserRequest, ::converse::service::main::SignoutUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SignoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignoutUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignoutUserRequest* /*request*/, ::converse::service::main::SignoutUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignoutUser(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::SignoutUserRequest* /*request*/, ::converse::service::main::SignoutUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteUser() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::DeleteUserRequest, ::converse::service::main::DeleteUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::DeleteUserRequest* request, ::converse::service::main::DeleteUserResponse* response) { return this->DeleteUser(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteUser(
        ::grpc::MessageAllocator< ::converse::service::main::DeleteUserRequest, ::converse::service::main::DeleteUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::DeleteUserRequest, ::converse::service::main::DeleteUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteUserRequest* /*request*/, ::converse::service::main::DeleteUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteUser(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::DeleteUserRequest* /*request*/, ::converse::service::main::DeleteUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOtherUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOtherUsers() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::GetOtherUsersRequest, ::converse::service::main::GetOtherUsersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::GetOtherUsersRequest* request, ::converse::service::main::GetOtherUsersResponse* response) { return this->GetOtherUsers(context, request, response); }));}
    void SetMessageAllocatorFor_GetOtherUsers(
        ::grpc::MessageAllocator< ::converse::service::main::GetOtherUsersRequest, ::converse::service::main::GetOtherUsersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::GetOtherUsersRequest, ::converse::service::main::GetOtherUsersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOtherUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOtherUsers(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetOtherUsersRequest* /*request*/, ::converse::service::main::GetOtherUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOtherUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::GetOtherUsersRequest* /*request*/, ::converse::service::main::GetOtherUsersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateConversation() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::CreateConversationRequest, ::converse::service::main::CreateConversationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::CreateConversationRequest* request, ::converse::service::main::CreateConversationResponse* response) { return this->CreateConversation(context, request, response); }));}
    void SetMessageAllocatorFor_CreateConversation(
        ::grpc::MessageAllocator< ::converse::service::main::CreateConversationRequest, ::converse::service::main::CreateConversationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::CreateConversationRequest, ::converse::service::main::CreateConversationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::CreateConversationRequest* /*request*/, ::converse::service::main::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::CreateConversationRequest* /*request*/, ::converse::service::main::CreateConversationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetConversation() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::GetConversationRequest, ::converse::service::main::GetConversationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::GetConversationRequest* request, ::converse::service::main::GetConversationResponse* response) { return this->GetConversation(context, request, response); }));}
    void SetMessageAllocatorFor_GetConversation(
        ::grpc::MessageAllocator< ::converse::service::main::GetConversationRequest, ::converse::service::main::GetConversationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::GetConversationRequest, ::converse::service::main::GetConversationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationRequest* /*request*/, ::converse::service::main::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::GetConversationRequest* /*request*/, ::converse::service::main::GetConversationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetConversations() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::GetConversationsRequest, ::converse::service::main::GetConversationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::GetConversationsRequest* request, ::converse::service::main::GetConversationsResponse* response) { return this->GetConversations(context, request, response); }));}
    void SetMessageAllocatorFor_GetConversations(
        ::grpc::MessageAllocator< ::converse::service::main::GetConversationsRequest, ::converse::service::main::GetConversationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::GetConversationsRequest, ::converse::service::main::GetConversationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversations(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationsRequest* /*request*/, ::converse::service::main::GetConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::GetConversationsRequest* /*request*/, ::converse::service::main::GetConversationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::DeleteConversationRequest, ::converse::service::main::DeleteConversationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::DeleteConversationRequest* request, ::converse::service::main::DeleteConversationResponse* response) { return this->DeleteConversation(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteConversation(
        ::grpc::MessageAllocator< ::converse::service::main::DeleteConversationRequest, ::converse::service::main::DeleteConversationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::DeleteConversationRequest, ::converse::service::main::DeleteConversationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteConversationRequest* /*request*/, ::converse::service::main::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::DeleteConversationRequest* /*request*/, ::converse::service::main::DeleteConversationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::SendMessageRequest, ::converse::service::main::SendMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::SendMessageRequest* request, ::converse::service::main::SendMessageResponse* response) { return this->SendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::MessageAllocator< ::converse::service::main::SendMessageRequest, ::converse::service::main::SendMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::SendMessageRequest, ::converse::service::main::SendMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::SendMessageRequest* /*request*/, ::converse::service::main::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::SendMessageRequest* /*request*/, ::converse::service::main::SendMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadMessages() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::ReadMessagesRequest, ::converse::service::main::ReadMessagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::ReadMessagesRequest* request, ::converse::service::main::ReadMessagesResponse* response) { return this->ReadMessages(context, request, response); }));}
    void SetMessageAllocatorFor_ReadMessages(
        ::grpc::MessageAllocator< ::converse::service::main::ReadMessagesRequest, ::converse::service::main::ReadMessagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::ReadMessagesRequest, ::converse::service::main::ReadMessagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReadMessagesRequest* /*request*/, ::converse::service::main::ReadMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::ReadMessagesRequest* /*request*/, ::converse::service::main::ReadMessagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMessages() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::GetMessagesRequest, ::converse::service::main::GetMessagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::GetMessagesRequest* request, ::converse::service::main::GetMessagesResponse* response) { return this->GetMessages(context, request, response); }));}
    void SetMessageAllocatorFor_GetMessages(
        ::grpc::MessageAllocator< ::converse::service::main::GetMessagesRequest, ::converse::service::main::GetMessagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::GetMessagesRequest, ::converse::service::main::GetMessagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetMessagesRequest* /*request*/, ::converse::service::main::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::GetMessagesRequest* /*request*/, ::converse::service::main::GetMessagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::main::DeleteMessageRequest, ::converse::service::main::DeleteMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::DeleteMessageRequest* request, ::converse::service::main::DeleteMessageResponse* response) { return this->DeleteMessage(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteMessage(
        ::grpc::MessageAllocator< ::converse::service::main::DeleteMessageRequest, ::converse::service::main::DeleteMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::main::DeleteMessageRequest, ::converse::service::main::DeleteMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteMessageRequest* /*request*/, ::converse::service::main::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::DeleteMessageRequest* /*request*/, ::converse::service::main::DeleteMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackServerStreamingHandler< ::converse::service::main::ReceiveMessageRequest, ::converse::service::main::ReceiveMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::ReceiveMessageRequest* request) { return this->ReceiveMessage(context, request); }));
    }
    ~WithCallbackMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::converse::service::main::ReceiveMessageResponse>* ReceiveMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::ReceiveMessageRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReceiveReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReceiveReadMessages() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::converse::service::main::ReceiveReadMessagesRequest, ::converse::service::main::ReceiveReadMessagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::main::ReceiveReadMessagesRequest* request) { return this->ReceiveReadMessages(context, request); }));
    }
    ~WithCallbackMethod_ReceiveReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveReadMessagesRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveReadMessagesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::converse::service::main::ReceiveReadMessagesResponse>* ReceiveReadMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::main::ReceiveReadMessagesRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SignupUser<WithCallbackMethod_SigninUser<WithCallbackMethod_SignoutUser<WithCallbackMethod_DeleteUser<WithCallbackMethod_GetOtherUsers<WithCallbackMethod_CreateConversation<WithCallbackMethod_GetConversation<WithCallbackMethod_GetConversations<WithCallbackMethod_DeleteConversation<WithCallbackMethod_SendMessage<WithCallbackMethod_ReadMessages<WithCallbackMethod_GetMessages<WithCallbackMethod_DeleteMessage<WithCallbackMethod_ReceiveMessage<WithCallbackMethod_ReceiveReadMessages<Service > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SignupUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignupUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SignupUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignupUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignupUserRequest* /*request*/, ::converse::service::main::SignupUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SigninUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SigninUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SigninUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigninUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SigninUserRequest* /*request*/, ::converse::service::main::SigninUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignoutUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SignoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignoutUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignoutUserRequest* /*request*/, ::converse::service::main::SignoutUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteUser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteUserRequest* /*request*/, ::converse::service::main::DeleteUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOtherUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOtherUsers() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetOtherUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOtherUsers(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetOtherUsersRequest* /*request*/, ::converse::service::main::GetOtherUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateConversation() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::CreateConversationRequest* /*request*/, ::converse::service::main::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConversation() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationRequest* /*request*/, ::converse::service::main::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConversations() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversations(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationsRequest* /*request*/, ::converse::service::main::GetConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteConversationRequest* /*request*/, ::converse::service::main::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::SendMessageRequest* /*request*/, ::converse::service::main::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadMessages() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReadMessagesRequest* /*request*/, ::converse::service::main::ReadMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMessages() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetMessagesRequest* /*request*/, ::converse::service::main::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteMessageRequest* /*request*/, ::converse::service::main::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceiveReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveReadMessages() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_ReceiveReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveReadMessagesRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveReadMessagesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignupUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignupUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SignupUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignupUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignupUserRequest* /*request*/, ::converse::service::main::SignupUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignupUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SigninUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SigninUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SigninUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigninUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SigninUserRequest* /*request*/, ::converse::service::main::SigninUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSigninUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignoutUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SignoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignoutUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignoutUserRequest* /*request*/, ::converse::service::main::SignoutUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignoutUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteUser() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteUserRequest* /*request*/, ::converse::service::main::DeleteUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOtherUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOtherUsers() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetOtherUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOtherUsers(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetOtherUsersRequest* /*request*/, ::converse::service::main::GetOtherUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOtherUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateConversation() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::CreateConversationRequest* /*request*/, ::converse::service::main::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateConversation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConversation() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationRequest* /*request*/, ::converse::service::main::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConversation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConversations() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversations(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationsRequest* /*request*/, ::converse::service::main::GetConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConversations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteConversationRequest* /*request*/, ::converse::service::main::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteConversation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::SendMessageRequest* /*request*/, ::converse::service::main::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadMessages() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReadMessagesRequest* /*request*/, ::converse::service::main::ReadMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMessages() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetMessagesRequest* /*request*/, ::converse::service::main::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteMessageRequest* /*request*/, ::converse::service::main::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveReadMessages() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_ReceiveReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveReadMessagesRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveReadMessagesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveReadMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SignupUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SignupUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignupUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_SignupUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignupUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignupUserRequest* /*request*/, ::converse::service::main::SignupUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignupUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SigninUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SigninUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SigninUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_SigninUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigninUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SigninUserRequest* /*request*/, ::converse::service::main::SigninUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SigninUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SignoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SignoutUser() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignoutUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_SignoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignoutUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignoutUserRequest* /*request*/, ::converse::service::main::SignoutUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignoutUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteUser() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteUserRequest* /*request*/, ::converse::service::main::DeleteUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOtherUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOtherUsers() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOtherUsers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOtherUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOtherUsers(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetOtherUsersRequest* /*request*/, ::converse::service::main::GetOtherUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOtherUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateConversation() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateConversation(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::CreateConversationRequest* /*request*/, ::converse::service::main::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetConversation() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConversation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationRequest* /*request*/, ::converse::service::main::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetConversations() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConversations(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConversations(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationsRequest* /*request*/, ::converse::service::main::GetConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteConversation(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteConversationRequest* /*request*/, ::converse::service::main::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::SendMessageRequest* /*request*/, ::converse::service::main::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadMessages() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReadMessagesRequest* /*request*/, ::converse::service::main::ReadMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMessages() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetMessagesRequest* /*request*/, ::converse::service::main::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteMessageRequest* /*request*/, ::converse::service::main::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ReceiveMessage(context, request); }));
    }
    ~WithRawCallbackMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReceiveMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReceiveReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReceiveReadMessages() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ReceiveReadMessages(context, request); }));
    }
    ~WithRawCallbackMethod_ReceiveReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveReadMessagesRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveReadMessagesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReceiveReadMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignupUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignupUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::SignupUserRequest, ::converse::service::main::SignupUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::SignupUserRequest, ::converse::service::main::SignupUserResponse>* streamer) {
                       return this->StreamedSignupUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignupUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignupUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignupUserRequest* /*request*/, ::converse::service::main::SignupUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignupUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::SignupUserRequest,::converse::service::main::SignupUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SigninUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SigninUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::SigninUserRequest, ::converse::service::main::SigninUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::SigninUserRequest, ::converse::service::main::SigninUserResponse>* streamer) {
                       return this->StreamedSigninUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SigninUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SigninUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SigninUserRequest* /*request*/, ::converse::service::main::SigninUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSigninUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::SigninUserRequest,::converse::service::main::SigninUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignoutUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::SignoutUserRequest, ::converse::service::main::SignoutUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::SignoutUserRequest, ::converse::service::main::SignoutUserResponse>* streamer) {
                       return this->StreamedSignoutUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignoutUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::SignoutUserRequest* /*request*/, ::converse::service::main::SignoutUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignoutUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::SignoutUserRequest,::converse::service::main::SignoutUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteUser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::DeleteUserRequest, ::converse::service::main::DeleteUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::DeleteUserRequest, ::converse::service::main::DeleteUserResponse>* streamer) {
                       return this->StreamedDeleteUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteUserRequest* /*request*/, ::converse::service::main::DeleteUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::DeleteUserRequest,::converse::service::main::DeleteUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOtherUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOtherUsers() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::GetOtherUsersRequest, ::converse::service::main::GetOtherUsersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::GetOtherUsersRequest, ::converse::service::main::GetOtherUsersResponse>* streamer) {
                       return this->StreamedGetOtherUsers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOtherUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOtherUsers(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetOtherUsersRequest* /*request*/, ::converse::service::main::GetOtherUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOtherUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::GetOtherUsersRequest,::converse::service::main::GetOtherUsersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateConversation() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::CreateConversationRequest, ::converse::service::main::CreateConversationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::CreateConversationRequest, ::converse::service::main::CreateConversationResponse>* streamer) {
                       return this->StreamedCreateConversation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::CreateConversationRequest* /*request*/, ::converse::service::main::CreateConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateConversation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::CreateConversationRequest,::converse::service::main::CreateConversationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConversation() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::GetConversationRequest, ::converse::service::main::GetConversationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::GetConversationRequest, ::converse::service::main::GetConversationResponse>* streamer) {
                       return this->StreamedGetConversation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationRequest* /*request*/, ::converse::service::main::GetConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConversation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::GetConversationRequest,::converse::service::main::GetConversationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConversations() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::GetConversationsRequest, ::converse::service::main::GetConversationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::GetConversationsRequest, ::converse::service::main::GetConversationsResponse>* streamer) {
                       return this->StreamedGetConversations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConversations(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetConversationsRequest* /*request*/, ::converse::service::main::GetConversationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConversations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::GetConversationsRequest,::converse::service::main::GetConversationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteConversation() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::DeleteConversationRequest, ::converse::service::main::DeleteConversationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::DeleteConversationRequest, ::converse::service::main::DeleteConversationResponse>* streamer) {
                       return this->StreamedDeleteConversation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteConversation(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteConversationRequest* /*request*/, ::converse::service::main::DeleteConversationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteConversation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::DeleteConversationRequest,::converse::service::main::DeleteConversationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::SendMessageRequest, ::converse::service::main::SendMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::SendMessageRequest, ::converse::service::main::SendMessageResponse>* streamer) {
                       return this->StreamedSendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::SendMessageRequest* /*request*/, ::converse::service::main::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::SendMessageRequest,::converse::service::main::SendMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadMessages() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::ReadMessagesRequest, ::converse::service::main::ReadMessagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::ReadMessagesRequest, ::converse::service::main::ReadMessagesResponse>* streamer) {
                       return this->StreamedReadMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReadMessagesRequest* /*request*/, ::converse::service::main::ReadMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::ReadMessagesRequest,::converse::service::main::ReadMessagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMessages() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::GetMessagesRequest, ::converse::service::main::GetMessagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::GetMessagesRequest, ::converse::service::main::GetMessagesResponse>* streamer) {
                       return this->StreamedGetMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::GetMessagesRequest* /*request*/, ::converse::service::main::GetMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::GetMessagesRequest,::converse::service::main::GetMessagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::main::DeleteMessageRequest, ::converse::service::main::DeleteMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::main::DeleteMessageRequest, ::converse::service::main::DeleteMessageResponse>* streamer) {
                       return this->StreamedDeleteMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::DeleteMessageRequest* /*request*/, ::converse::service::main::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::main::DeleteMessageRequest,::converse::service::main::DeleteMessageResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SignupUser<WithStreamedUnaryMethod_SigninUser<WithStreamedUnaryMethod_SignoutUser<WithStreamedUnaryMethod_DeleteUser<WithStreamedUnaryMethod_GetOtherUsers<WithStreamedUnaryMethod_CreateConversation<WithStreamedUnaryMethod_GetConversation<WithStreamedUnaryMethod_GetConversations<WithStreamedUnaryMethod_DeleteConversation<WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_ReadMessages<WithStreamedUnaryMethod_GetMessages<WithStreamedUnaryMethod_DeleteMessage<Service > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::converse::service::main::ReceiveMessageRequest, ::converse::service::main::ReceiveMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::converse::service::main::ReceiveMessageRequest, ::converse::service::main::ReceiveMessageResponse>* streamer) {
                       return this->StreamedReceiveMessage(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReceiveMessage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::converse::service::main::ReceiveMessageRequest,::converse::service::main::ReceiveMessageResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ReceiveReadMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReceiveReadMessages() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::converse::service::main::ReceiveReadMessagesRequest, ::converse::service::main::ReceiveReadMessagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::converse::service::main::ReceiveReadMessagesRequest, ::converse::service::main::ReceiveReadMessagesResponse>* streamer) {
                       return this->StreamedReceiveReadMessages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReceiveReadMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveReadMessages(::grpc::ServerContext* /*context*/, const ::converse::service::main::ReceiveReadMessagesRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::main::ReceiveReadMessagesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReceiveReadMessages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::converse::service::main::ReceiveReadMessagesRequest,::converse::service::main::ReceiveReadMessagesResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ReceiveMessage<WithSplitStreamingMethod_ReceiveReadMessages<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SignupUser<WithStreamedUnaryMethod_SigninUser<WithStreamedUnaryMethod_SignoutUser<WithStreamedUnaryMethod_DeleteUser<WithStreamedUnaryMethod_GetOtherUsers<WithStreamedUnaryMethod_CreateConversation<WithStreamedUnaryMethod_GetConversation<WithStreamedUnaryMethod_GetConversations<WithStreamedUnaryMethod_DeleteConversation<WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_ReadMessages<WithStreamedUnaryMethod_GetMessages<WithStreamedUnaryMethod_DeleteMessage<WithSplitStreamingMethod_ReceiveMessage<WithSplitStreamingMethod_ReceiveReadMessages<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace main
}  // namespace service
}  // namespace converse


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_converse_2fservice_2fmain_2fmain_2eproto__INCLUDED

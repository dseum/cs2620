// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: converse/service/link/link.proto

#include "converse/service/link/link.pb.h"
#include "converse/service/link/link.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace converse {
namespace service {
namespace link {

static const char* LinkService_method_names[] = {
  "/converse.service.link.LinkService/GetServers",
  "/converse.service.link.LinkService/IdentifyMyself",
  "/converse.service.link.LinkService/GetTransactions",
};

std::unique_ptr< LinkService::Stub> LinkService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LinkService::Stub> stub(new LinkService::Stub(channel, options));
  return stub;
}

LinkService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetServers_(LinkService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_IdentifyMyself_(LinkService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactions_(LinkService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::converse::service::link::GetServersResponse>* LinkService::Stub::GetServersRaw(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::converse::service::link::GetServersResponse>::Create(channel_.get(), rpcmethod_GetServers_, context, request);
}

void LinkService::Stub::async::GetServers(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest* request, ::grpc::ClientReadReactor< ::converse::service::link::GetServersResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::converse::service::link::GetServersResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetServers_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::converse::service::link::GetServersResponse>* LinkService::Stub::AsyncGetServersRaw(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::converse::service::link::GetServersResponse>::Create(channel_.get(), cq, rpcmethod_GetServers_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::converse::service::link::GetServersResponse>* LinkService::Stub::PrepareAsyncGetServersRaw(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::converse::service::link::GetServersResponse>::Create(channel_.get(), cq, rpcmethod_GetServers_, context, request, false, nullptr);
}

::grpc::Status LinkService::Stub::IdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::converse::service::link::IdentifyMyselfResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::service::link::IdentifyMyselfRequest, ::converse::service::link::IdentifyMyselfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IdentifyMyself_, context, request, response);
}

void LinkService::Stub::async::IdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest* request, ::converse::service::link::IdentifyMyselfResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::service::link::IdentifyMyselfRequest, ::converse::service::link::IdentifyMyselfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IdentifyMyself_, context, request, response, std::move(f));
}

void LinkService::Stub::async::IdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest* request, ::converse::service::link::IdentifyMyselfResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IdentifyMyself_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::service::link::IdentifyMyselfResponse>* LinkService::Stub::PrepareAsyncIdentifyMyselfRaw(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::service::link::IdentifyMyselfResponse, ::converse::service::link::IdentifyMyselfRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IdentifyMyself_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::service::link::IdentifyMyselfResponse>* LinkService::Stub::AsyncIdentifyMyselfRaw(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIdentifyMyselfRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::converse::service::link::GetTransactionsResponse>* LinkService::Stub::GetTransactionsRaw(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::converse::service::link::GetTransactionsResponse>::Create(channel_.get(), rpcmethod_GetTransactions_, context, request);
}

void LinkService::Stub::async::GetTransactions(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest* request, ::grpc::ClientReadReactor< ::converse::service::link::GetTransactionsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::converse::service::link::GetTransactionsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetTransactions_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::converse::service::link::GetTransactionsResponse>* LinkService::Stub::AsyncGetTransactionsRaw(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::converse::service::link::GetTransactionsResponse>::Create(channel_.get(), cq, rpcmethod_GetTransactions_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::converse::service::link::GetTransactionsResponse>* LinkService::Stub::PrepareAsyncGetTransactionsRaw(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::converse::service::link::GetTransactionsResponse>::Create(channel_.get(), cq, rpcmethod_GetTransactions_, context, request, false, nullptr);
}

LinkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LinkService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LinkService::Service, ::converse::service::link::GetServersRequest, ::converse::service::link::GetServersResponse>(
          [](LinkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::link::GetServersRequest* req,
             ::grpc::ServerWriter<::converse::service::link::GetServersResponse>* writer) {
               return service->GetServers(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LinkService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LinkService::Service, ::converse::service::link::IdentifyMyselfRequest, ::converse::service::link::IdentifyMyselfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LinkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::link::IdentifyMyselfRequest* req,
             ::converse::service::link::IdentifyMyselfResponse* resp) {
               return service->IdentifyMyself(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LinkService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LinkService::Service, ::converse::service::link::GetTransactionsRequest, ::converse::service::link::GetTransactionsResponse>(
          [](LinkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::service::link::GetTransactionsRequest* req,
             ::grpc::ServerWriter<::converse::service::link::GetTransactionsResponse>* writer) {
               return service->GetTransactions(ctx, req, writer);
             }, this)));
}

LinkService::Service::~Service() {
}

::grpc::Status LinkService::Service::GetServers(::grpc::ServerContext* context, const ::converse::service::link::GetServersRequest* request, ::grpc::ServerWriter< ::converse::service::link::GetServersResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LinkService::Service::IdentifyMyself(::grpc::ServerContext* context, const ::converse::service::link::IdentifyMyselfRequest* request, ::converse::service::link::IdentifyMyselfResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LinkService::Service::GetTransactions(::grpc::ServerContext* context, const ::converse::service::link::GetTransactionsRequest* request, ::grpc::ServerWriter< ::converse::service::link::GetTransactionsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace converse
}  // namespace service
}  // namespace link


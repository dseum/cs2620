// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: converse/service/link/link.proto
// Protobuf C++ Version: 5.29.3

#ifndef converse_2fservice_2flink_2flink_2eproto_2epb_2eh
#define converse_2fservice_2flink_2flink_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_converse_2fservice_2flink_2flink_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_converse_2fservice_2flink_2flink_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_converse_2fservice_2flink_2flink_2eproto;
namespace converse {
namespace service {
namespace link {
class ClaimServerIdRequest;
struct ClaimServerIdRequestDefaultTypeInternal;
extern ClaimServerIdRequestDefaultTypeInternal _ClaimServerIdRequest_default_instance_;
class ClaimServerIdResponse;
struct ClaimServerIdResponseDefaultTypeInternal;
extern ClaimServerIdResponseDefaultTypeInternal _ClaimServerIdResponse_default_instance_;
class GetServersRequest;
struct GetServersRequestDefaultTypeInternal;
extern GetServersRequestDefaultTypeInternal _GetServersRequest_default_instance_;
class GetServersResponse;
struct GetServersResponseDefaultTypeInternal;
extern GetServersResponseDefaultTypeInternal _GetServersResponse_default_instance_;
class IdentifyMyselfRequest;
struct IdentifyMyselfRequestDefaultTypeInternal;
extern IdentifyMyselfRequestDefaultTypeInternal _IdentifyMyselfRequest_default_instance_;
class IdentifyMyselfResponse;
struct IdentifyMyselfResponseDefaultTypeInternal;
extern IdentifyMyselfResponseDefaultTypeInternal _IdentifyMyselfResponse_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class Operation_NewValuesEntry_DoNotUse;
struct Operation_NewValuesEntry_DoNotUseDefaultTypeInternal;
extern Operation_NewValuesEntry_DoNotUseDefaultTypeInternal _Operation_NewValuesEntry_DoNotUse_default_instance_;
class Operation_OldKeyValuesEntry_DoNotUse;
struct Operation_OldKeyValuesEntry_DoNotUseDefaultTypeInternal;
extern Operation_OldKeyValuesEntry_DoNotUseDefaultTypeInternal _Operation_OldKeyValuesEntry_DoNotUse_default_instance_;
class ReplicateTransactionRequest;
struct ReplicateTransactionRequestDefaultTypeInternal;
extern ReplicateTransactionRequestDefaultTypeInternal _ReplicateTransactionRequest_default_instance_;
class ReplicateTransactionResponse;
struct ReplicateTransactionResponseDefaultTypeInternal;
extern ReplicateTransactionResponseDefaultTypeInternal _ReplicateTransactionResponse_default_instance_;
}  // namespace link
}  // namespace service
}  // namespace converse
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace converse {
namespace service {
namespace link {
enum OperationType : int {
  OPERATION_TYPE_UNSPECIFIED = 0,
  OPERATION_TYPE_INSERT = 1,
  OPERATION_TYPE_UPDATE = 2,
  OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OperationType_IsValid(int value);
extern const uint32_t OperationType_internal_data_[];
constexpr OperationType OperationType_MIN = static_cast<OperationType>(0);
constexpr OperationType OperationType_MAX = static_cast<OperationType>(2);
constexpr int OperationType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
OperationType_descriptor();
template <typename T>
const std::string& OperationType_Name(T value) {
  static_assert(std::is_same<T, OperationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OperationType_Name().");
  return OperationType_Name(static_cast<OperationType>(value));
}
template <>
inline const std::string& OperationType_Name(OperationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OperationType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool OperationType_Parse(absl::string_view name, OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OperationType>(
      OperationType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ReplicateTransactionResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:converse.service.link.ReplicateTransactionResponse) */ {
 public:
  inline ReplicateTransactionResponse() : ReplicateTransactionResponse(nullptr) {}
  ~ReplicateTransactionResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReplicateTransactionResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReplicateTransactionResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplicateTransactionResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReplicateTransactionResponse(const ReplicateTransactionResponse& from) : ReplicateTransactionResponse(nullptr, from) {}
  inline ReplicateTransactionResponse(ReplicateTransactionResponse&& from) noexcept
      : ReplicateTransactionResponse(nullptr, std::move(from)) {}
  inline ReplicateTransactionResponse& operator=(const ReplicateTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicateTransactionResponse& operator=(ReplicateTransactionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicateTransactionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicateTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const ReplicateTransactionResponse*>(
        &_ReplicateTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ReplicateTransactionResponse& a, ReplicateTransactionResponse& b) { a.Swap(&b); }
  inline void Swap(ReplicateTransactionResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicateTransactionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicateTransactionResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReplicateTransactionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplicateTransactionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReplicateTransactionResponse& from) { ReplicateTransactionResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReplicateTransactionResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "converse.service.link.ReplicateTransactionResponse"; }

 protected:
  explicit ReplicateTransactionResponse(::google::protobuf::Arena* arena);
  ReplicateTransactionResponse(::google::protobuf::Arena* arena, const ReplicateTransactionResponse& from);
  ReplicateTransactionResponse(::google::protobuf::Arena* arena, ReplicateTransactionResponse&& from) noexcept
      : ReplicateTransactionResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2 [json_name = "errorMessage"];
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // bool success = 1 [json_name = "success"];
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:converse.service.link.ReplicateTransactionResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      72, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReplicateTransactionResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2fservice_2flink_2flink_2eproto;
};
// -------------------------------------------------------------------

class Operation_OldKeyValuesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Operation_OldKeyValuesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Operation_OldKeyValuesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Operation_OldKeyValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Operation_OldKeyValuesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Operation_OldKeyValuesEntry_DoNotUse*>(
        &_Operation_OldKeyValuesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_converse_2fservice_2flink_2flink_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      66, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Operation_NewValuesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Operation_NewValuesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Operation_NewValuesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Operation_NewValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Operation_NewValuesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Operation_NewValuesEntry_DoNotUse*>(
        &_Operation_NewValuesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_converse_2fservice_2flink_2flink_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class IdentifyMyselfResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:converse.service.link.IdentifyMyselfResponse) */ {
 public:
  inline IdentifyMyselfResponse() : IdentifyMyselfResponse(nullptr) {}
  ~IdentifyMyselfResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IdentifyMyselfResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IdentifyMyselfResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IdentifyMyselfResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline IdentifyMyselfResponse(const IdentifyMyselfResponse& from) : IdentifyMyselfResponse(nullptr, from) {}
  inline IdentifyMyselfResponse(IdentifyMyselfResponse&& from) noexcept
      : IdentifyMyselfResponse(nullptr, std::move(from)) {}
  inline IdentifyMyselfResponse& operator=(const IdentifyMyselfResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifyMyselfResponse& operator=(IdentifyMyselfResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdentifyMyselfResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentifyMyselfResponse* internal_default_instance() {
    return reinterpret_cast<const IdentifyMyselfResponse*>(
        &_IdentifyMyselfResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(IdentifyMyselfResponse& a, IdentifyMyselfResponse& b) { a.Swap(&b); }
  inline void Swap(IdentifyMyselfResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentifyMyselfResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdentifyMyselfResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IdentifyMyselfResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IdentifyMyselfResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IdentifyMyselfResponse& from) { IdentifyMyselfResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IdentifyMyselfResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "converse.service.link.IdentifyMyselfResponse"; }

 protected:
  explicit IdentifyMyselfResponse(::google::protobuf::Arena* arena);
  IdentifyMyselfResponse(::google::protobuf::Arena* arena, const IdentifyMyselfResponse& from);
  IdentifyMyselfResponse(::google::protobuf::Arena* arena, IdentifyMyselfResponse&& from) noexcept
      : IdentifyMyselfResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint64 server_id = 1 [json_name = "serverId"];
  void clear_server_id() ;
  ::uint64_t server_id() const;
  void set_server_id(::uint64_t value);

  private:
  ::uint64_t _internal_server_id() const;
  void _internal_set_server_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:converse.service.link.IdentifyMyselfResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IdentifyMyselfResponse& from_msg);
    ::uint64_t server_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2fservice_2flink_2flink_2eproto;
};
// -------------------------------------------------------------------

class IdentifyMyselfRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:converse.service.link.IdentifyMyselfRequest) */ {
 public:
  inline IdentifyMyselfRequest() : IdentifyMyselfRequest(nullptr) {}
  ~IdentifyMyselfRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IdentifyMyselfRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IdentifyMyselfRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IdentifyMyselfRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline IdentifyMyselfRequest(const IdentifyMyselfRequest& from) : IdentifyMyselfRequest(nullptr, from) {}
  inline IdentifyMyselfRequest(IdentifyMyselfRequest&& from) noexcept
      : IdentifyMyselfRequest(nullptr, std::move(from)) {}
  inline IdentifyMyselfRequest& operator=(const IdentifyMyselfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifyMyselfRequest& operator=(IdentifyMyselfRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdentifyMyselfRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentifyMyselfRequest* internal_default_instance() {
    return reinterpret_cast<const IdentifyMyselfRequest*>(
        &_IdentifyMyselfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(IdentifyMyselfRequest& a, IdentifyMyselfRequest& b) { a.Swap(&b); }
  inline void Swap(IdentifyMyselfRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentifyMyselfRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdentifyMyselfRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IdentifyMyselfRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IdentifyMyselfRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IdentifyMyselfRequest& from) { IdentifyMyselfRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IdentifyMyselfRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "converse.service.link.IdentifyMyselfRequest"; }

 protected:
  explicit IdentifyMyselfRequest(::google::protobuf::Arena* arena);
  IdentifyMyselfRequest(::google::protobuf::Arena* arena, const IdentifyMyselfRequest& from);
  IdentifyMyselfRequest(::google::protobuf::Arena* arena, IdentifyMyselfRequest&& from) noexcept
      : IdentifyMyselfRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string host = 1 [json_name = "host"];
  void clear_host() ;
  const std::string& host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* value);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // uint32 port = 2 [json_name = "port"];
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:converse.service.link.IdentifyMyselfRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IdentifyMyselfRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr host_;
    ::uint32_t port_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2fservice_2flink_2flink_2eproto;
};
// -------------------------------------------------------------------

class GetServersResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:converse.service.link.GetServersResponse) */ {
 public:
  inline GetServersResponse() : GetServersResponse(nullptr) {}
  ~GetServersResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetServersResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetServersResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetServersResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetServersResponse(const GetServersResponse& from) : GetServersResponse(nullptr, from) {}
  inline GetServersResponse(GetServersResponse&& from) noexcept
      : GetServersResponse(nullptr, std::move(from)) {}
  inline GetServersResponse& operator=(const GetServersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServersResponse& operator=(GetServersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServersResponse* internal_default_instance() {
    return reinterpret_cast<const GetServersResponse*>(
        &_GetServersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GetServersResponse& a, GetServersResponse& b) { a.Swap(&b); }
  inline void Swap(GetServersResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServersResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetServersResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetServersResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetServersResponse& from) { GetServersResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetServersResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "converse.service.link.GetServersResponse"; }

 protected:
  explicit GetServersResponse(::google::protobuf::Arena* arena);
  GetServersResponse(::google::protobuf::Arena* arena, const GetServersResponse& from);
  GetServersResponse(::google::protobuf::Arena* arena, GetServersResponse&& from) noexcept
      : GetServersResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerIdsFieldNumber = 1,
  };
  // repeated uint64 server_ids = 1 [json_name = "serverIds"];
  int server_ids_size() const;
  private:
  int _internal_server_ids_size() const;

  public:
  void clear_server_ids() ;
  ::uint64_t server_ids(int index) const;
  void set_server_ids(int index, ::uint64_t value);
  void add_server_ids(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& server_ids() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_server_ids();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_server_ids() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_server_ids();

  public:
  // @@protoc_insertion_point(class_scope:converse.service.link.GetServersResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetServersResponse& from_msg);
    ::google::protobuf::RepeatedField<::uint64_t> server_ids_;
    ::google::protobuf::internal::CachedSize _server_ids_cached_byte_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2fservice_2flink_2flink_2eproto;
};
// -------------------------------------------------------------------

class GetServersRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:converse.service.link.GetServersRequest) */ {
 public:
  inline GetServersRequest() : GetServersRequest(nullptr) {}
  ~GetServersRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetServersRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetServersRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetServersRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetServersRequest(const GetServersRequest& from) : GetServersRequest(nullptr, from) {}
  inline GetServersRequest(GetServersRequest&& from) noexcept
      : GetServersRequest(nullptr, std::move(from)) {}
  inline GetServersRequest& operator=(const GetServersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServersRequest& operator=(GetServersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServersRequest* internal_default_instance() {
    return reinterpret_cast<const GetServersRequest*>(
        &_GetServersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GetServersRequest& a, GetServersRequest& b) { a.Swap(&b); }
  inline void Swap(GetServersRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServersRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetServersRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetServersRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetServersRequest& from) { GetServersRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetServersRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "converse.service.link.GetServersRequest"; }

 protected:
  explicit GetServersRequest(::google::protobuf::Arena* arena);
  GetServersRequest(::google::protobuf::Arena* arena, const GetServersRequest& from);
  GetServersRequest(::google::protobuf::Arena* arena, GetServersRequest&& from) noexcept
      : GetServersRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint64 server_id = 1 [json_name = "serverId"];
  void clear_server_id() ;
  ::uint64_t server_id() const;
  void set_server_id(::uint64_t value);

  private:
  ::uint64_t _internal_server_id() const;
  void _internal_set_server_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:converse.service.link.GetServersRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetServersRequest& from_msg);
    ::uint64_t server_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2fservice_2flink_2flink_2eproto;
};
// -------------------------------------------------------------------

class ClaimServerIdResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:converse.service.link.ClaimServerIdResponse) */ {
 public:
  inline ClaimServerIdResponse() : ClaimServerIdResponse(nullptr) {}
  ~ClaimServerIdResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClaimServerIdResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClaimServerIdResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClaimServerIdResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClaimServerIdResponse(const ClaimServerIdResponse& from) : ClaimServerIdResponse(nullptr, from) {}
  inline ClaimServerIdResponse(ClaimServerIdResponse&& from) noexcept
      : ClaimServerIdResponse(nullptr, std::move(from)) {}
  inline ClaimServerIdResponse& operator=(const ClaimServerIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClaimServerIdResponse& operator=(ClaimServerIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClaimServerIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClaimServerIdResponse* internal_default_instance() {
    return reinterpret_cast<const ClaimServerIdResponse*>(
        &_ClaimServerIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ClaimServerIdResponse& a, ClaimServerIdResponse& b) { a.Swap(&b); }
  inline void Swap(ClaimServerIdResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClaimServerIdResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClaimServerIdResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClaimServerIdResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClaimServerIdResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClaimServerIdResponse& from) { ClaimServerIdResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClaimServerIdResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "converse.service.link.ClaimServerIdResponse"; }

 protected:
  explicit ClaimServerIdResponse(::google::protobuf::Arena* arena);
  ClaimServerIdResponse(::google::protobuf::Arena* arena, const ClaimServerIdResponse& from);
  ClaimServerIdResponse(::google::protobuf::Arena* arena, ClaimServerIdResponse&& from) noexcept
      : ClaimServerIdResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint64 server_id = 1 [json_name = "serverId"];
  void clear_server_id() ;
  ::uint64_t server_id() const;
  void set_server_id(::uint64_t value);

  private:
  ::uint64_t _internal_server_id() const;
  void _internal_set_server_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:converse.service.link.ClaimServerIdResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClaimServerIdResponse& from_msg);
    ::uint64_t server_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2fservice_2flink_2flink_2eproto;
};
// -------------------------------------------------------------------

class ClaimServerIdRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:converse.service.link.ClaimServerIdRequest) */ {
 public:
  inline ClaimServerIdRequest() : ClaimServerIdRequest(nullptr) {}
  ~ClaimServerIdRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClaimServerIdRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClaimServerIdRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClaimServerIdRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClaimServerIdRequest(const ClaimServerIdRequest& from) : ClaimServerIdRequest(nullptr, from) {}
  inline ClaimServerIdRequest(ClaimServerIdRequest&& from) noexcept
      : ClaimServerIdRequest(nullptr, std::move(from)) {}
  inline ClaimServerIdRequest& operator=(const ClaimServerIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClaimServerIdRequest& operator=(ClaimServerIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClaimServerIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClaimServerIdRequest* internal_default_instance() {
    return reinterpret_cast<const ClaimServerIdRequest*>(
        &_ClaimServerIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ClaimServerIdRequest& a, ClaimServerIdRequest& b) { a.Swap(&b); }
  inline void Swap(ClaimServerIdRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClaimServerIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClaimServerIdRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClaimServerIdRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClaimServerIdRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClaimServerIdRequest& from) { ClaimServerIdRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClaimServerIdRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "converse.service.link.ClaimServerIdRequest"; }

 protected:
  explicit ClaimServerIdRequest(::google::protobuf::Arena* arena);
  ClaimServerIdRequest(::google::protobuf::Arena* arena, const ClaimServerIdRequest& from);
  ClaimServerIdRequest(::google::protobuf::Arena* arena, ClaimServerIdRequest&& from) noexcept
      : ClaimServerIdRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint64 server_id = 1 [json_name = "serverId"];
  void clear_server_id() ;
  ::uint64_t server_id() const;
  void set_server_id(::uint64_t value);

  private:
  ::uint64_t _internal_server_id() const;
  void _internal_set_server_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:converse.service.link.ClaimServerIdRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClaimServerIdRequest& from_msg);
    ::uint64_t server_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2fservice_2flink_2flink_2eproto;
};
// -------------------------------------------------------------------

class Operation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:converse.service.link.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Operation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Operation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Operation(
      ::google::protobuf::internal::ConstantInitialized);

  inline Operation(const Operation& from) : Operation(nullptr, from) {}
  inline Operation(Operation&& from) noexcept
      : Operation(nullptr, std::move(from)) {}
  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
        &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Operation& a, Operation& b) { a.Swap(&b); }
  inline void Swap(Operation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Operation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Operation& from) { Operation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Operation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "converse.service.link.Operation"; }

 protected:
  explicit Operation(::google::protobuf::Arena* arena);
  Operation(::google::protobuf::Arena* arena, const Operation& from);
  Operation(::google::protobuf::Arena* arena, Operation&& from) noexcept
      : Operation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewValuesFieldNumber = 3,
    kOldKeyValuesFieldNumber = 4,
    kTableNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // map<string, string> new_values = 3 [json_name = "newValues"];
  int new_values_size() const;
  private:
  int _internal_new_values_size() const;

  public:
  void clear_new_values() ;
  const ::google::protobuf::Map<std::string, std::string>& new_values() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_new_values();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_new_values() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_new_values();

  public:
  // map<string, string> old_key_values = 4 [json_name = "oldKeyValues"];
  int old_key_values_size() const;
  private:
  int _internal_old_key_values_size() const;

  public:
  void clear_old_key_values() ;
  const ::google::protobuf::Map<std::string, std::string>& old_key_values() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_old_key_values();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_old_key_values() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_old_key_values();

  public:
  // string table_name = 2 [json_name = "tableName"];
  void clear_table_name() ;
  const std::string& table_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_table_name(Arg_&& arg, Args_... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* value);

  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(
      const std::string& value);
  std::string* _internal_mutable_table_name();

  public:
  // .converse.service.link.OperationType type = 1 [json_name = "type"];
  void clear_type() ;
  ::converse::service::link::OperationType type() const;
  void set_type(::converse::service::link::OperationType value);

  private:
  ::converse::service::link::OperationType _internal_type() const;
  void _internal_set_type(::converse::service::link::OperationType value);

  public:
  // @@protoc_insertion_point(class_scope:converse.service.link.Operation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 2,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Operation& from_msg);
    ::google::protobuf::internal::MapField<Operation_NewValuesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        new_values_;
    ::google::protobuf::internal::MapField<Operation_OldKeyValuesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        old_key_values_;
    ::google::protobuf::internal::ArenaStringPtr table_name_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2fservice_2flink_2flink_2eproto;
};
// -------------------------------------------------------------------

class ReplicateTransactionRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:converse.service.link.ReplicateTransactionRequest) */ {
 public:
  inline ReplicateTransactionRequest() : ReplicateTransactionRequest(nullptr) {}
  ~ReplicateTransactionRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReplicateTransactionRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReplicateTransactionRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplicateTransactionRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReplicateTransactionRequest(const ReplicateTransactionRequest& from) : ReplicateTransactionRequest(nullptr, from) {}
  inline ReplicateTransactionRequest(ReplicateTransactionRequest&& from) noexcept
      : ReplicateTransactionRequest(nullptr, std::move(from)) {}
  inline ReplicateTransactionRequest& operator=(const ReplicateTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicateTransactionRequest& operator=(ReplicateTransactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicateTransactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicateTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const ReplicateTransactionRequest*>(
        &_ReplicateTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ReplicateTransactionRequest& a, ReplicateTransactionRequest& b) { a.Swap(&b); }
  inline void Swap(ReplicateTransactionRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicateTransactionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicateTransactionRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReplicateTransactionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplicateTransactionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReplicateTransactionRequest& from) { ReplicateTransactionRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReplicateTransactionRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "converse.service.link.ReplicateTransactionRequest"; }

 protected:
  explicit ReplicateTransactionRequest(::google::protobuf::Arena* arena);
  ReplicateTransactionRequest(::google::protobuf::Arena* arena, const ReplicateTransactionRequest& from);
  ReplicateTransactionRequest(::google::protobuf::Arena* arena, ReplicateTransactionRequest&& from) noexcept
      : ReplicateTransactionRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOperationsFieldNumber = 2,
    kTransactionIdFieldNumber = 1,
  };
  // repeated .converse.service.link.Operation operations = 2 [json_name = "operations"];
  int operations_size() const;
  private:
  int _internal_operations_size() const;

  public:
  void clear_operations() ;
  ::converse::service::link::Operation* mutable_operations(int index);
  ::google::protobuf::RepeatedPtrField<::converse::service::link::Operation>* mutable_operations();

  private:
  const ::google::protobuf::RepeatedPtrField<::converse::service::link::Operation>& _internal_operations() const;
  ::google::protobuf::RepeatedPtrField<::converse::service::link::Operation>* _internal_mutable_operations();
  public:
  const ::converse::service::link::Operation& operations(int index) const;
  ::converse::service::link::Operation* add_operations();
  const ::google::protobuf::RepeatedPtrField<::converse::service::link::Operation>& operations() const;
  // uint64 transaction_id = 1 [json_name = "transactionId"];
  void clear_transaction_id() ;
  ::uint64_t transaction_id() const;
  void set_transaction_id(::uint64_t value);

  private:
  ::uint64_t _internal_transaction_id() const;
  void _internal_set_transaction_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:converse.service.link.ReplicateTransactionRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReplicateTransactionRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::converse::service::link::Operation > operations_;
    ::uint64_t transaction_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2fservice_2flink_2flink_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetServersRequest

// uint64 server_id = 1 [json_name = "serverId"];
inline void GetServersRequest::clear_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_ = ::uint64_t{0u};
}
inline ::uint64_t GetServersRequest::server_id() const {
  // @@protoc_insertion_point(field_get:converse.service.link.GetServersRequest.server_id)
  return _internal_server_id();
}
inline void GetServersRequest::set_server_id(::uint64_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:converse.service.link.GetServersRequest.server_id)
}
inline ::uint64_t GetServersRequest::_internal_server_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_id_;
}
inline void GetServersRequest::_internal_set_server_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_ = value;
}

// -------------------------------------------------------------------

// GetServersResponse

// repeated uint64 server_ids = 1 [json_name = "serverIds"];
inline int GetServersResponse::_internal_server_ids_size() const {
  return _internal_server_ids().size();
}
inline int GetServersResponse::server_ids_size() const {
  return _internal_server_ids_size();
}
inline void GetServersResponse::clear_server_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_ids_.Clear();
}
inline ::uint64_t GetServersResponse::server_ids(int index) const {
  // @@protoc_insertion_point(field_get:converse.service.link.GetServersResponse.server_ids)
  return _internal_server_ids().Get(index);
}
inline void GetServersResponse::set_server_ids(int index, ::uint64_t value) {
  _internal_mutable_server_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:converse.service.link.GetServersResponse.server_ids)
}
inline void GetServersResponse::add_server_ids(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_server_ids()->Add(value);
  // @@protoc_insertion_point(field_add:converse.service.link.GetServersResponse.server_ids)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& GetServersResponse::server_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:converse.service.link.GetServersResponse.server_ids)
  return _internal_server_ids();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* GetServersResponse::mutable_server_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:converse.service.link.GetServersResponse.server_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_server_ids();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
GetServersResponse::_internal_server_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_ids_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* GetServersResponse::_internal_mutable_server_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.server_ids_;
}

// -------------------------------------------------------------------

// IdentifyMyselfRequest

// string host = 1 [json_name = "host"];
inline void IdentifyMyselfRequest::clear_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.ClearToEmpty();
}
inline const std::string& IdentifyMyselfRequest::host() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:converse.service.link.IdentifyMyselfRequest.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentifyMyselfRequest::set_host(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:converse.service.link.IdentifyMyselfRequest.host)
}
inline std::string* IdentifyMyselfRequest::mutable_host() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:converse.service.link.IdentifyMyselfRequest.host)
  return _s;
}
inline const std::string& IdentifyMyselfRequest::_internal_host() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.host_.Get();
}
inline void IdentifyMyselfRequest::_internal_set_host(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.Set(value, GetArena());
}
inline std::string* IdentifyMyselfRequest::_internal_mutable_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.host_.Mutable( GetArena());
}
inline std::string* IdentifyMyselfRequest::release_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:converse.service.link.IdentifyMyselfRequest.host)
  return _impl_.host_.Release();
}
inline void IdentifyMyselfRequest::set_allocated_host(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:converse.service.link.IdentifyMyselfRequest.host)
}

// uint32 port = 2 [json_name = "port"];
inline void IdentifyMyselfRequest::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = 0u;
}
inline ::uint32_t IdentifyMyselfRequest::port() const {
  // @@protoc_insertion_point(field_get:converse.service.link.IdentifyMyselfRequest.port)
  return _internal_port();
}
inline void IdentifyMyselfRequest::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:converse.service.link.IdentifyMyselfRequest.port)
}
inline ::uint32_t IdentifyMyselfRequest::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void IdentifyMyselfRequest::_internal_set_port(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// IdentifyMyselfResponse

// uint64 server_id = 1 [json_name = "serverId"];
inline void IdentifyMyselfResponse::clear_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_ = ::uint64_t{0u};
}
inline ::uint64_t IdentifyMyselfResponse::server_id() const {
  // @@protoc_insertion_point(field_get:converse.service.link.IdentifyMyselfResponse.server_id)
  return _internal_server_id();
}
inline void IdentifyMyselfResponse::set_server_id(::uint64_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:converse.service.link.IdentifyMyselfResponse.server_id)
}
inline ::uint64_t IdentifyMyselfResponse::_internal_server_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_id_;
}
inline void IdentifyMyselfResponse::_internal_set_server_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_ = value;
}

// -------------------------------------------------------------------

// ClaimServerIdRequest

// uint64 server_id = 1 [json_name = "serverId"];
inline void ClaimServerIdRequest::clear_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_ = ::uint64_t{0u};
}
inline ::uint64_t ClaimServerIdRequest::server_id() const {
  // @@protoc_insertion_point(field_get:converse.service.link.ClaimServerIdRequest.server_id)
  return _internal_server_id();
}
inline void ClaimServerIdRequest::set_server_id(::uint64_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:converse.service.link.ClaimServerIdRequest.server_id)
}
inline ::uint64_t ClaimServerIdRequest::_internal_server_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_id_;
}
inline void ClaimServerIdRequest::_internal_set_server_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_ = value;
}

// -------------------------------------------------------------------

// ClaimServerIdResponse

// uint64 server_id = 1 [json_name = "serverId"];
inline void ClaimServerIdResponse::clear_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_ = ::uint64_t{0u};
}
inline ::uint64_t ClaimServerIdResponse::server_id() const {
  // @@protoc_insertion_point(field_get:converse.service.link.ClaimServerIdResponse.server_id)
  return _internal_server_id();
}
inline void ClaimServerIdResponse::set_server_id(::uint64_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:converse.service.link.ClaimServerIdResponse.server_id)
}
inline ::uint64_t ClaimServerIdResponse::_internal_server_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_id_;
}
inline void ClaimServerIdResponse::_internal_set_server_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_ = value;
}

// -------------------------------------------------------------------

// ReplicateTransactionRequest

// uint64 transaction_id = 1 [json_name = "transactionId"];
inline void ReplicateTransactionRequest::clear_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_ = ::uint64_t{0u};
}
inline ::uint64_t ReplicateTransactionRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:converse.service.link.ReplicateTransactionRequest.transaction_id)
  return _internal_transaction_id();
}
inline void ReplicateTransactionRequest::set_transaction_id(::uint64_t value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:converse.service.link.ReplicateTransactionRequest.transaction_id)
}
inline ::uint64_t ReplicateTransactionRequest::_internal_transaction_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_id_;
}
inline void ReplicateTransactionRequest::_internal_set_transaction_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_ = value;
}

// repeated .converse.service.link.Operation operations = 2 [json_name = "operations"];
inline int ReplicateTransactionRequest::_internal_operations_size() const {
  return _internal_operations().size();
}
inline int ReplicateTransactionRequest::operations_size() const {
  return _internal_operations_size();
}
inline void ReplicateTransactionRequest::clear_operations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operations_.Clear();
}
inline ::converse::service::link::Operation* ReplicateTransactionRequest::mutable_operations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:converse.service.link.ReplicateTransactionRequest.operations)
  return _internal_mutable_operations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::converse::service::link::Operation>* ReplicateTransactionRequest::mutable_operations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:converse.service.link.ReplicateTransactionRequest.operations)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_operations();
}
inline const ::converse::service::link::Operation& ReplicateTransactionRequest::operations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:converse.service.link.ReplicateTransactionRequest.operations)
  return _internal_operations().Get(index);
}
inline ::converse::service::link::Operation* ReplicateTransactionRequest::add_operations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::converse::service::link::Operation* _add = _internal_mutable_operations()->Add();
  // @@protoc_insertion_point(field_add:converse.service.link.ReplicateTransactionRequest.operations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::converse::service::link::Operation>& ReplicateTransactionRequest::operations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:converse.service.link.ReplicateTransactionRequest.operations)
  return _internal_operations();
}
inline const ::google::protobuf::RepeatedPtrField<::converse::service::link::Operation>&
ReplicateTransactionRequest::_internal_operations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operations_;
}
inline ::google::protobuf::RepeatedPtrField<::converse::service::link::Operation>*
ReplicateTransactionRequest::_internal_mutable_operations() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.operations_;
}

// -------------------------------------------------------------------

// ReplicateTransactionResponse

// bool success = 1 [json_name = "success"];
inline void ReplicateTransactionResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool ReplicateTransactionResponse::success() const {
  // @@protoc_insertion_point(field_get:converse.service.link.ReplicateTransactionResponse.success)
  return _internal_success();
}
inline void ReplicateTransactionResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:converse.service.link.ReplicateTransactionResponse.success)
}
inline bool ReplicateTransactionResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ReplicateTransactionResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2 [json_name = "errorMessage"];
inline void ReplicateTransactionResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& ReplicateTransactionResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:converse.service.link.ReplicateTransactionResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplicateTransactionResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:converse.service.link.ReplicateTransactionResponse.error_message)
}
inline std::string* ReplicateTransactionResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:converse.service.link.ReplicateTransactionResponse.error_message)
  return _s;
}
inline const std::string& ReplicateTransactionResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void ReplicateTransactionResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* ReplicateTransactionResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* ReplicateTransactionResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:converse.service.link.ReplicateTransactionResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void ReplicateTransactionResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:converse.service.link.ReplicateTransactionResponse.error_message)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Operation

// .converse.service.link.OperationType type = 1 [json_name = "type"];
inline void Operation::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::converse::service::link::OperationType Operation::type() const {
  // @@protoc_insertion_point(field_get:converse.service.link.Operation.type)
  return _internal_type();
}
inline void Operation::set_type(::converse::service::link::OperationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:converse.service.link.Operation.type)
}
inline ::converse::service::link::OperationType Operation::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::converse::service::link::OperationType>(_impl_.type_);
}
inline void Operation::_internal_set_type(::converse::service::link::OperationType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string table_name = 2 [json_name = "tableName"];
inline void Operation::clear_table_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& Operation::table_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:converse.service.link.Operation.table_name)
  return _internal_table_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Operation::set_table_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:converse.service.link.Operation.table_name)
}
inline std::string* Operation::mutable_table_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:converse.service.link.Operation.table_name)
  return _s;
}
inline const std::string& Operation::_internal_table_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.table_name_.Get();
}
inline void Operation::_internal_set_table_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_name_.Set(value, GetArena());
}
inline std::string* Operation::_internal_mutable_table_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.table_name_.Mutable( GetArena());
}
inline std::string* Operation::release_table_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:converse.service.link.Operation.table_name)
  return _impl_.table_name_.Release();
}
inline void Operation::set_allocated_table_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:converse.service.link.Operation.table_name)
}

// map<string, string> new_values = 3 [json_name = "newValues"];
inline int Operation::_internal_new_values_size() const {
  return _internal_new_values().size();
}
inline int Operation::new_values_size() const {
  return _internal_new_values_size();
}
inline void Operation::clear_new_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_values_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Operation::_internal_new_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_values_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Operation::new_values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:converse.service.link.Operation.new_values)
  return _internal_new_values();
}
inline ::google::protobuf::Map<std::string, std::string>* Operation::_internal_mutable_new_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_values_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Operation::mutable_new_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:converse.service.link.Operation.new_values)
  return _internal_mutable_new_values();
}

// map<string, string> old_key_values = 4 [json_name = "oldKeyValues"];
inline int Operation::_internal_old_key_values_size() const {
  return _internal_old_key_values().size();
}
inline int Operation::old_key_values_size() const {
  return _internal_old_key_values_size();
}
inline void Operation::clear_old_key_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_key_values_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Operation::_internal_old_key_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.old_key_values_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Operation::old_key_values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:converse.service.link.Operation.old_key_values)
  return _internal_old_key_values();
}
inline ::google::protobuf::Map<std::string, std::string>* Operation::_internal_mutable_old_key_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.old_key_values_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Operation::mutable_old_key_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:converse.service.link.Operation.old_key_values)
  return _internal_mutable_old_key_values();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace link
}  // namespace service
}  // namespace converse


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::converse::service::link::OperationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::converse::service::link::OperationType>() {
  return ::converse::service::link::OperationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // converse_2fservice_2flink_2flink_2eproto_2epb_2eh

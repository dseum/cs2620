// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: converse/service/link/link.proto
#ifndef GRPC_converse_2fservice_2flink_2flink_2eproto__INCLUDED
#define GRPC_converse_2fservice_2flink_2flink_2eproto__INCLUDED

#include "converse/service/link/link.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace converse {
namespace service {
namespace link {

class LinkService final {
 public:
  static constexpr char const* service_full_name() {
    return "converse.service.link.LinkService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::converse::service::link::GetServersResponse>> GetServers(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::converse::service::link::GetServersResponse>>(GetServersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetServersResponse>> AsyncGetServers(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetServersResponse>>(AsyncGetServersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetServersResponse>> PrepareAsyncGetServers(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetServersResponse>>(PrepareAsyncGetServersRaw(context, request, cq));
    }
    virtual ::grpc::Status IdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::converse::service::link::IdentifyMyselfResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::link::IdentifyMyselfResponse>> AsyncIdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::link::IdentifyMyselfResponse>>(AsyncIdentifyMyselfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::link::IdentifyMyselfResponse>> PrepareAsyncIdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::link::IdentifyMyselfResponse>>(PrepareAsyncIdentifyMyselfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::converse::service::link::GetTransactionsResponse>> GetTransactions(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::converse::service::link::GetTransactionsResponse>>(GetTransactionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetTransactionsResponse>> AsyncGetTransactions(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetTransactionsResponse>>(AsyncGetTransactionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetTransactionsResponse>> PrepareAsyncGetTransactions(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetTransactionsResponse>>(PrepareAsyncGetTransactionsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetServers(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest* request, ::grpc::ClientReadReactor< ::converse::service::link::GetServersResponse>* reactor) = 0;
      virtual void IdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest* request, ::converse::service::link::IdentifyMyselfResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest* request, ::converse::service::link::IdentifyMyselfResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactions(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest* request, ::grpc::ClientReadReactor< ::converse::service::link::GetTransactionsResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::converse::service::link::GetServersResponse>* GetServersRaw(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetServersResponse>* AsyncGetServersRaw(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetServersResponse>* PrepareAsyncGetServersRaw(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::link::IdentifyMyselfResponse>* AsyncIdentifyMyselfRaw(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::converse::service::link::IdentifyMyselfResponse>* PrepareAsyncIdentifyMyselfRaw(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::converse::service::link::GetTransactionsResponse>* GetTransactionsRaw(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetTransactionsResponse>* AsyncGetTransactionsRaw(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::converse::service::link::GetTransactionsResponse>* PrepareAsyncGetTransactionsRaw(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::converse::service::link::GetServersResponse>> GetServers(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::converse::service::link::GetServersResponse>>(GetServersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::link::GetServersResponse>> AsyncGetServers(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::link::GetServersResponse>>(AsyncGetServersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::link::GetServersResponse>> PrepareAsyncGetServers(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::link::GetServersResponse>>(PrepareAsyncGetServersRaw(context, request, cq));
    }
    ::grpc::Status IdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::converse::service::link::IdentifyMyselfResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::link::IdentifyMyselfResponse>> AsyncIdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::link::IdentifyMyselfResponse>>(AsyncIdentifyMyselfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::link::IdentifyMyselfResponse>> PrepareAsyncIdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::converse::service::link::IdentifyMyselfResponse>>(PrepareAsyncIdentifyMyselfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::converse::service::link::GetTransactionsResponse>> GetTransactions(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::converse::service::link::GetTransactionsResponse>>(GetTransactionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::link::GetTransactionsResponse>> AsyncGetTransactions(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::link::GetTransactionsResponse>>(AsyncGetTransactionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::link::GetTransactionsResponse>> PrepareAsyncGetTransactions(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::converse::service::link::GetTransactionsResponse>>(PrepareAsyncGetTransactionsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetServers(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest* request, ::grpc::ClientReadReactor< ::converse::service::link::GetServersResponse>* reactor) override;
      void IdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest* request, ::converse::service::link::IdentifyMyselfResponse* response, std::function<void(::grpc::Status)>) override;
      void IdentifyMyself(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest* request, ::converse::service::link::IdentifyMyselfResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactions(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest* request, ::grpc::ClientReadReactor< ::converse::service::link::GetTransactionsResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::converse::service::link::GetServersResponse>* GetServersRaw(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request) override;
    ::grpc::ClientAsyncReader< ::converse::service::link::GetServersResponse>* AsyncGetServersRaw(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::converse::service::link::GetServersResponse>* PrepareAsyncGetServersRaw(::grpc::ClientContext* context, const ::converse::service::link::GetServersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::link::IdentifyMyselfResponse>* AsyncIdentifyMyselfRaw(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::converse::service::link::IdentifyMyselfResponse>* PrepareAsyncIdentifyMyselfRaw(::grpc::ClientContext* context, const ::converse::service::link::IdentifyMyselfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::converse::service::link::GetTransactionsResponse>* GetTransactionsRaw(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request) override;
    ::grpc::ClientAsyncReader< ::converse::service::link::GetTransactionsResponse>* AsyncGetTransactionsRaw(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::converse::service::link::GetTransactionsResponse>* PrepareAsyncGetTransactionsRaw(::grpc::ClientContext* context, const ::converse::service::link::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetServers_;
    const ::grpc::internal::RpcMethod rpcmethod_IdentifyMyself_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetServers(::grpc::ServerContext* context, const ::converse::service::link::GetServersRequest* request, ::grpc::ServerWriter< ::converse::service::link::GetServersResponse>* writer);
    virtual ::grpc::Status IdentifyMyself(::grpc::ServerContext* context, const ::converse::service::link::IdentifyMyselfRequest* request, ::converse::service::link::IdentifyMyselfResponse* response);
    virtual ::grpc::Status GetTransactions(::grpc::ServerContext* context, const ::converse::service::link::GetTransactionsRequest* request, ::grpc::ServerWriter< ::converse::service::link::GetTransactionsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServers() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetServersRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetServersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServers(::grpc::ServerContext* context, ::converse::service::link::GetServersRequest* request, ::grpc::ServerAsyncWriter< ::converse::service::link::GetServersResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IdentifyMyself : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IdentifyMyself() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_IdentifyMyself() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IdentifyMyself(::grpc::ServerContext* /*context*/, const ::converse::service::link::IdentifyMyselfRequest* /*request*/, ::converse::service::link::IdentifyMyselfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIdentifyMyself(::grpc::ServerContext* context, ::converse::service::link::IdentifyMyselfRequest* request, ::grpc::ServerAsyncResponseWriter< ::converse::service::link::IdentifyMyselfResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactions() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactions(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetTransactionsRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetTransactionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactions(::grpc::ServerContext* context, ::converse::service::link::GetTransactionsRequest* request, ::grpc::ServerAsyncWriter< ::converse::service::link::GetTransactionsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetServers<WithAsyncMethod_IdentifyMyself<WithAsyncMethod_GetTransactions<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServers() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::converse::service::link::GetServersRequest, ::converse::service::link::GetServersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::link::GetServersRequest* request) { return this->GetServers(context, request); }));
    }
    ~WithCallbackMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetServersRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetServersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::converse::service::link::GetServersResponse>* GetServers(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::link::GetServersRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IdentifyMyself : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IdentifyMyself() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::converse::service::link::IdentifyMyselfRequest, ::converse::service::link::IdentifyMyselfResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::link::IdentifyMyselfRequest* request, ::converse::service::link::IdentifyMyselfResponse* response) { return this->IdentifyMyself(context, request, response); }));}
    void SetMessageAllocatorFor_IdentifyMyself(
        ::grpc::MessageAllocator< ::converse::service::link::IdentifyMyselfRequest, ::converse::service::link::IdentifyMyselfResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::converse::service::link::IdentifyMyselfRequest, ::converse::service::link::IdentifyMyselfResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IdentifyMyself() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IdentifyMyself(::grpc::ServerContext* /*context*/, const ::converse::service::link::IdentifyMyselfRequest* /*request*/, ::converse::service::link::IdentifyMyselfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IdentifyMyself(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::link::IdentifyMyselfRequest* /*request*/, ::converse::service::link::IdentifyMyselfResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactions() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::converse::service::link::GetTransactionsRequest, ::converse::service::link::GetTransactionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::converse::service::link::GetTransactionsRequest* request) { return this->GetTransactions(context, request); }));
    }
    ~WithCallbackMethod_GetTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactions(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetTransactionsRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetTransactionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::converse::service::link::GetTransactionsResponse>* GetTransactions(
      ::grpc::CallbackServerContext* /*context*/, const ::converse::service::link::GetTransactionsRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetServers<WithCallbackMethod_IdentifyMyself<WithCallbackMethod_GetTransactions<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServers() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetServersRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetServersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IdentifyMyself : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IdentifyMyself() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_IdentifyMyself() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IdentifyMyself(::grpc::ServerContext* /*context*/, const ::converse::service::link::IdentifyMyselfRequest* /*request*/, ::converse::service::link::IdentifyMyselfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactions() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactions(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetTransactionsRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetTransactionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServers() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetServersRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetServersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IdentifyMyself : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IdentifyMyself() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_IdentifyMyself() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IdentifyMyself(::grpc::ServerContext* /*context*/, const ::converse::service::link::IdentifyMyselfRequest* /*request*/, ::converse::service::link::IdentifyMyselfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIdentifyMyself(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactions() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactions(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetTransactionsRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetTransactionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServers() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetServers(context, request); }));
    }
    ~WithRawCallbackMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetServersRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetServersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetServers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IdentifyMyself : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IdentifyMyself() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IdentifyMyself(context, request, response); }));
    }
    ~WithRawCallbackMethod_IdentifyMyself() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IdentifyMyself(::grpc::ServerContext* /*context*/, const ::converse::service::link::IdentifyMyselfRequest* /*request*/, ::converse::service::link::IdentifyMyselfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IdentifyMyself(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactions() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetTransactions(context, request); }));
    }
    ~WithRawCallbackMethod_GetTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactions(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetTransactionsRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetTransactionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetTransactions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IdentifyMyself : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IdentifyMyself() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::converse::service::link::IdentifyMyselfRequest, ::converse::service::link::IdentifyMyselfResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::converse::service::link::IdentifyMyselfRequest, ::converse::service::link::IdentifyMyselfResponse>* streamer) {
                       return this->StreamedIdentifyMyself(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IdentifyMyself() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IdentifyMyself(::grpc::ServerContext* /*context*/, const ::converse::service::link::IdentifyMyselfRequest* /*request*/, ::converse::service::link::IdentifyMyselfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIdentifyMyself(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::converse::service::link::IdentifyMyselfRequest,::converse::service::link::IdentifyMyselfResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_IdentifyMyself<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetServers() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::converse::service::link::GetServersRequest, ::converse::service::link::GetServersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::converse::service::link::GetServersRequest, ::converse::service::link::GetServersResponse>* streamer) {
                       return this->StreamedGetServers(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServers(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetServersRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetServersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetServers(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::converse::service::link::GetServersRequest,::converse::service::link::GetServersResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetTransactions() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::converse::service::link::GetTransactionsRequest, ::converse::service::link::GetTransactionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::converse::service::link::GetTransactionsRequest, ::converse::service::link::GetTransactionsResponse>* streamer) {
                       return this->StreamedGetTransactions(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactions(::grpc::ServerContext* /*context*/, const ::converse::service::link::GetTransactionsRequest* /*request*/, ::grpc::ServerWriter< ::converse::service::link::GetTransactionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetTransactions(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::converse::service::link::GetTransactionsRequest,::converse::service::link::GetTransactionsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetServers<WithSplitStreamingMethod_GetTransactions<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetServers<WithStreamedUnaryMethod_IdentifyMyself<WithSplitStreamingMethod_GetTransactions<Service > > > StreamedService;
};

}  // namespace link
}  // namespace service
}  // namespace converse


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_converse_2fservice_2flink_2flink_2eproto__INCLUDED

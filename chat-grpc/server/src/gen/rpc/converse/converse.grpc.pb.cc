// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: converse/converse.proto

#include "converse/converse.pb.h"
#include "converse/converse.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace converse {

static const char* ConverseService_method_names[] = {
  "/converse.ConverseService/SignupUser",
  "/converse.ConverseService/SigninUser",
  "/converse.ConverseService/SignoutUser",
  "/converse.ConverseService/DeleteUser",
  "/converse.ConverseService/GetOtherUsers",
  "/converse.ConverseService/CreateConversation",
  "/converse.ConverseService/GetConversation",
  "/converse.ConverseService/DeleteConversation",
  "/converse.ConverseService/SendMessage",
  "/converse.ConverseService/GetMessages",
  "/converse.ConverseService/DeleteMessage",
  "/converse.ConverseService/ReceiveMessage",
};

std::unique_ptr< ConverseService::Stub> ConverseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConverseService::Stub> stub(new ConverseService::Stub(channel, options));
  return stub;
}

ConverseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SignupUser_(ConverseService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SigninUser_(ConverseService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignoutUser_(ConverseService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUser_(ConverseService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOtherUsers_(ConverseService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateConversation_(ConverseService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConversation_(ConverseService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteConversation_(ConverseService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessage_(ConverseService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMessages_(ConverseService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMessage_(ConverseService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReceiveMessage_(ConverseService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ConverseService::Stub::SignupUser(::grpc::ClientContext* context, const ::converse::SignupUserRequest& request, ::converse::SignupUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::SignupUserRequest, ::converse::SignupUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignupUser_, context, request, response);
}

void ConverseService::Stub::async::SignupUser(::grpc::ClientContext* context, const ::converse::SignupUserRequest* request, ::converse::SignupUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::SignupUserRequest, ::converse::SignupUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignupUser_, context, request, response, std::move(f));
}

void ConverseService::Stub::async::SignupUser(::grpc::ClientContext* context, const ::converse::SignupUserRequest* request, ::converse::SignupUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignupUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::SignupUserResponse>* ConverseService::Stub::PrepareAsyncSignupUserRaw(::grpc::ClientContext* context, const ::converse::SignupUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::SignupUserResponse, ::converse::SignupUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignupUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::SignupUserResponse>* ConverseService::Stub::AsyncSignupUserRaw(::grpc::ClientContext* context, const ::converse::SignupUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignupUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConverseService::Stub::SigninUser(::grpc::ClientContext* context, const ::converse::SigninUserRequest& request, ::converse::SigninUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::SigninUserRequest, ::converse::SigninUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SigninUser_, context, request, response);
}

void ConverseService::Stub::async::SigninUser(::grpc::ClientContext* context, const ::converse::SigninUserRequest* request, ::converse::SigninUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::SigninUserRequest, ::converse::SigninUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SigninUser_, context, request, response, std::move(f));
}

void ConverseService::Stub::async::SigninUser(::grpc::ClientContext* context, const ::converse::SigninUserRequest* request, ::converse::SigninUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SigninUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::SigninUserResponse>* ConverseService::Stub::PrepareAsyncSigninUserRaw(::grpc::ClientContext* context, const ::converse::SigninUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::SigninUserResponse, ::converse::SigninUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SigninUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::SigninUserResponse>* ConverseService::Stub::AsyncSigninUserRaw(::grpc::ClientContext* context, const ::converse::SigninUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSigninUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConverseService::Stub::SignoutUser(::grpc::ClientContext* context, const ::converse::SignoutUserRequest& request, ::converse::SignoutUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::SignoutUserRequest, ::converse::SignoutUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignoutUser_, context, request, response);
}

void ConverseService::Stub::async::SignoutUser(::grpc::ClientContext* context, const ::converse::SignoutUserRequest* request, ::converse::SignoutUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::SignoutUserRequest, ::converse::SignoutUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignoutUser_, context, request, response, std::move(f));
}

void ConverseService::Stub::async::SignoutUser(::grpc::ClientContext* context, const ::converse::SignoutUserRequest* request, ::converse::SignoutUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignoutUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::SignoutUserResponse>* ConverseService::Stub::PrepareAsyncSignoutUserRaw(::grpc::ClientContext* context, const ::converse::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::SignoutUserResponse, ::converse::SignoutUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignoutUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::SignoutUserResponse>* ConverseService::Stub::AsyncSignoutUserRaw(::grpc::ClientContext* context, const ::converse::SignoutUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignoutUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConverseService::Stub::DeleteUser(::grpc::ClientContext* context, const ::converse::DeleteUserRequest& request, ::converse::DeleteUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::DeleteUserRequest, ::converse::DeleteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteUser_, context, request, response);
}

void ConverseService::Stub::async::DeleteUser(::grpc::ClientContext* context, const ::converse::DeleteUserRequest* request, ::converse::DeleteUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::DeleteUserRequest, ::converse::DeleteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, std::move(f));
}

void ConverseService::Stub::async::DeleteUser(::grpc::ClientContext* context, const ::converse::DeleteUserRequest* request, ::converse::DeleteUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::DeleteUserResponse>* ConverseService::Stub::PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::converse::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::DeleteUserResponse, ::converse::DeleteUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::DeleteUserResponse>* ConverseService::Stub::AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::converse::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConverseService::Stub::GetOtherUsers(::grpc::ClientContext* context, const ::converse::GetOtherUsersRequest& request, ::converse::GetOtherUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::GetOtherUsersRequest, ::converse::GetOtherUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOtherUsers_, context, request, response);
}

void ConverseService::Stub::async::GetOtherUsers(::grpc::ClientContext* context, const ::converse::GetOtherUsersRequest* request, ::converse::GetOtherUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::GetOtherUsersRequest, ::converse::GetOtherUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOtherUsers_, context, request, response, std::move(f));
}

void ConverseService::Stub::async::GetOtherUsers(::grpc::ClientContext* context, const ::converse::GetOtherUsersRequest* request, ::converse::GetOtherUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOtherUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::GetOtherUsersResponse>* ConverseService::Stub::PrepareAsyncGetOtherUsersRaw(::grpc::ClientContext* context, const ::converse::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::GetOtherUsersResponse, ::converse::GetOtherUsersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOtherUsers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::GetOtherUsersResponse>* ConverseService::Stub::AsyncGetOtherUsersRaw(::grpc::ClientContext* context, const ::converse::GetOtherUsersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOtherUsersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConverseService::Stub::CreateConversation(::grpc::ClientContext* context, const ::converse::CreateConversationRequest& request, ::converse::CreateConversationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::CreateConversationRequest, ::converse::CreateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateConversation_, context, request, response);
}

void ConverseService::Stub::async::CreateConversation(::grpc::ClientContext* context, const ::converse::CreateConversationRequest* request, ::converse::CreateConversationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::CreateConversationRequest, ::converse::CreateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConversation_, context, request, response, std::move(f));
}

void ConverseService::Stub::async::CreateConversation(::grpc::ClientContext* context, const ::converse::CreateConversationRequest* request, ::converse::CreateConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConversation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::CreateConversationResponse>* ConverseService::Stub::PrepareAsyncCreateConversationRaw(::grpc::ClientContext* context, const ::converse::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::CreateConversationResponse, ::converse::CreateConversationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateConversation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::CreateConversationResponse>* ConverseService::Stub::AsyncCreateConversationRaw(::grpc::ClientContext* context, const ::converse::CreateConversationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateConversationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConverseService::Stub::GetConversation(::grpc::ClientContext* context, const ::converse::GetConversationRequest& request, ::converse::GetConversationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::GetConversationRequest, ::converse::GetConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConversation_, context, request, response);
}

void ConverseService::Stub::async::GetConversation(::grpc::ClientContext* context, const ::converse::GetConversationRequest* request, ::converse::GetConversationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::GetConversationRequest, ::converse::GetConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConversation_, context, request, response, std::move(f));
}

void ConverseService::Stub::async::GetConversation(::grpc::ClientContext* context, const ::converse::GetConversationRequest* request, ::converse::GetConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConversation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::GetConversationResponse>* ConverseService::Stub::PrepareAsyncGetConversationRaw(::grpc::ClientContext* context, const ::converse::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::GetConversationResponse, ::converse::GetConversationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConversation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::GetConversationResponse>* ConverseService::Stub::AsyncGetConversationRaw(::grpc::ClientContext* context, const ::converse::GetConversationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConversationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConverseService::Stub::DeleteConversation(::grpc::ClientContext* context, const ::converse::DeleteConversationRequest& request, ::converse::DeleteConversationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::DeleteConversationRequest, ::converse::DeleteConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteConversation_, context, request, response);
}

void ConverseService::Stub::async::DeleteConversation(::grpc::ClientContext* context, const ::converse::DeleteConversationRequest* request, ::converse::DeleteConversationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::DeleteConversationRequest, ::converse::DeleteConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteConversation_, context, request, response, std::move(f));
}

void ConverseService::Stub::async::DeleteConversation(::grpc::ClientContext* context, const ::converse::DeleteConversationRequest* request, ::converse::DeleteConversationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteConversation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::DeleteConversationResponse>* ConverseService::Stub::PrepareAsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::converse::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::DeleteConversationResponse, ::converse::DeleteConversationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteConversation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::DeleteConversationResponse>* ConverseService::Stub::AsyncDeleteConversationRaw(::grpc::ClientContext* context, const ::converse::DeleteConversationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteConversationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConverseService::Stub::SendMessage(::grpc::ClientContext* context, const ::converse::SendMessageRequest& request, ::converse::SendMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::SendMessageRequest, ::converse::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void ConverseService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::converse::SendMessageRequest* request, ::converse::SendMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::SendMessageRequest, ::converse::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void ConverseService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::converse::SendMessageRequest* request, ::converse::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::SendMessageResponse>* ConverseService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::converse::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::SendMessageResponse, ::converse::SendMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::SendMessageResponse>* ConverseService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::converse::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConverseService::Stub::GetMessages(::grpc::ClientContext* context, const ::converse::GetMessagesRequest& request, ::converse::GetMessagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::GetMessagesRequest, ::converse::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMessages_, context, request, response);
}

void ConverseService::Stub::async::GetMessages(::grpc::ClientContext* context, const ::converse::GetMessagesRequest* request, ::converse::GetMessagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::GetMessagesRequest, ::converse::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, std::move(f));
}

void ConverseService::Stub::async::GetMessages(::grpc::ClientContext* context, const ::converse::GetMessagesRequest* request, ::converse::GetMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::GetMessagesResponse>* ConverseService::Stub::PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::converse::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::GetMessagesResponse, ::converse::GetMessagesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::GetMessagesResponse>* ConverseService::Stub::AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::converse::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConverseService::Stub::DeleteMessage(::grpc::ClientContext* context, const ::converse::DeleteMessageRequest& request, ::converse::DeleteMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::converse::DeleteMessageRequest, ::converse::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteMessage_, context, request, response);
}

void ConverseService::Stub::async::DeleteMessage(::grpc::ClientContext* context, const ::converse::DeleteMessageRequest* request, ::converse::DeleteMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::converse::DeleteMessageRequest, ::converse::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, std::move(f));
}

void ConverseService::Stub::async::DeleteMessage(::grpc::ClientContext* context, const ::converse::DeleteMessageRequest* request, ::converse::DeleteMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::converse::DeleteMessageResponse>* ConverseService::Stub::PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::converse::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::converse::DeleteMessageResponse, ::converse::DeleteMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::converse::DeleteMessageResponse>* ConverseService::Stub::AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::converse::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::converse::Message>* ConverseService::Stub::ReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::ReceiveMessageRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::converse::Message>::Create(channel_.get(), rpcmethod_ReceiveMessage_, context, request);
}

void ConverseService::Stub::async::ReceiveMessage(::grpc::ClientContext* context, const ::converse::ReceiveMessageRequest* request, ::grpc::ClientReadReactor< ::converse::Message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::converse::Message>::Create(stub_->channel_.get(), stub_->rpcmethod_ReceiveMessage_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::converse::Message>* ConverseService::Stub::AsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::converse::Message>::Create(channel_.get(), cq, rpcmethod_ReceiveMessage_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::converse::Message>* ConverseService::Stub::PrepareAsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::converse::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::converse::Message>::Create(channel_.get(), cq, rpcmethod_ReceiveMessage_, context, request, false, nullptr);
}

ConverseService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConverseService::Service, ::converse::SignupUserRequest, ::converse::SignupUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::SignupUserRequest* req,
             ::converse::SignupUserResponse* resp) {
               return service->SignupUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConverseService::Service, ::converse::SigninUserRequest, ::converse::SigninUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::SigninUserRequest* req,
             ::converse::SigninUserResponse* resp) {
               return service->SigninUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConverseService::Service, ::converse::SignoutUserRequest, ::converse::SignoutUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::SignoutUserRequest* req,
             ::converse::SignoutUserResponse* resp) {
               return service->SignoutUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConverseService::Service, ::converse::DeleteUserRequest, ::converse::DeleteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::DeleteUserRequest* req,
             ::converse::DeleteUserResponse* resp) {
               return service->DeleteUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConverseService::Service, ::converse::GetOtherUsersRequest, ::converse::GetOtherUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::GetOtherUsersRequest* req,
             ::converse::GetOtherUsersResponse* resp) {
               return service->GetOtherUsers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConverseService::Service, ::converse::CreateConversationRequest, ::converse::CreateConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::CreateConversationRequest* req,
             ::converse::CreateConversationResponse* resp) {
               return service->CreateConversation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConverseService::Service, ::converse::GetConversationRequest, ::converse::GetConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::GetConversationRequest* req,
             ::converse::GetConversationResponse* resp) {
               return service->GetConversation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConverseService::Service, ::converse::DeleteConversationRequest, ::converse::DeleteConversationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::DeleteConversationRequest* req,
             ::converse::DeleteConversationResponse* resp) {
               return service->DeleteConversation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConverseService::Service, ::converse::SendMessageRequest, ::converse::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::SendMessageRequest* req,
             ::converse::SendMessageResponse* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConverseService::Service, ::converse::GetMessagesRequest, ::converse::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::GetMessagesRequest* req,
             ::converse::GetMessagesResponse* resp) {
               return service->GetMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConverseService::Service, ::converse::DeleteMessageRequest, ::converse::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::DeleteMessageRequest* req,
             ::converse::DeleteMessageResponse* resp) {
               return service->DeleteMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConverseService_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ConverseService::Service, ::converse::ReceiveMessageRequest, ::converse::Message>(
          [](ConverseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::converse::ReceiveMessageRequest* req,
             ::grpc::ServerWriter<::converse::Message>* writer) {
               return service->ReceiveMessage(ctx, req, writer);
             }, this)));
}

ConverseService::Service::~Service() {
}

::grpc::Status ConverseService::Service::SignupUser(::grpc::ServerContext* context, const ::converse::SignupUserRequest* request, ::converse::SignupUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConverseService::Service::SigninUser(::grpc::ServerContext* context, const ::converse::SigninUserRequest* request, ::converse::SigninUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConverseService::Service::SignoutUser(::grpc::ServerContext* context, const ::converse::SignoutUserRequest* request, ::converse::SignoutUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConverseService::Service::DeleteUser(::grpc::ServerContext* context, const ::converse::DeleteUserRequest* request, ::converse::DeleteUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConverseService::Service::GetOtherUsers(::grpc::ServerContext* context, const ::converse::GetOtherUsersRequest* request, ::converse::GetOtherUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConverseService::Service::CreateConversation(::grpc::ServerContext* context, const ::converse::CreateConversationRequest* request, ::converse::CreateConversationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConverseService::Service::GetConversation(::grpc::ServerContext* context, const ::converse::GetConversationRequest* request, ::converse::GetConversationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConverseService::Service::DeleteConversation(::grpc::ServerContext* context, const ::converse::DeleteConversationRequest* request, ::converse::DeleteConversationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConverseService::Service::SendMessage(::grpc::ServerContext* context, const ::converse::SendMessageRequest* request, ::converse::SendMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConverseService::Service::GetMessages(::grpc::ServerContext* context, const ::converse::GetMessagesRequest* request, ::converse::GetMessagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConverseService::Service::DeleteMessage(::grpc::ServerContext* context, const ::converse::DeleteMessageRequest* request, ::converse::DeleteMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConverseService::Service::ReceiveMessage(::grpc::ServerContext* context, const ::converse::ReceiveMessageRequest* request, ::grpc::ServerWriter< ::converse::Message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace converse

